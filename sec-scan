#!/usr/bin/env python3
"""
Security Scanner - Network discovery and port scanning
Usage: sec-scan [target] [options]
"""

import asyncio
import subprocess
import json
import argparse
import sys
from datetime import datetime
from pathlib import Path

class SecurityScanner:
    """Network security scanner"""
    
    def __init__(self):
        self.results_dir = Path("/var/log/security/scans")
        self.results_dir.mkdir(parents=True, exist_ok=True)
    
    async def scan(self, target: str, mode: str = 'quick', ports: str = None, 
                   output_file: str = None, verbose: bool = False):
        """Perform network scan"""
        
        # Build nmap command based on mode
        cmd = ['nmap']
        
        if mode == 'quick':
            cmd.extend(['-F', '-T4'])  # Fast scan, aggressive timing
            if verbose:
                print(f"[*] Quick scan of {target}")
        elif mode == 'full':
            cmd.extend(['-p-', '-sV', '-O', '-T3'])  # All ports, service/OS detection
            if verbose:
                print(f"[*] Full scan of {target} (this may take time)")
        elif mode == 'stealth':
            cmd.extend(['-sS', '-Pn', '-T2', '-f'])  # SYN scan, no ping, slow, fragmented
            if verbose:
                print(f"[*] Stealth scan of {target}")
        elif mode == 'web':
            web_ports = ports or "80,443,8080,8443,8000,3000,5000"
            cmd.extend(['-p', web_ports, '-sV', '--script', 'http-enum,http-headers,ssl-cert'])
            if verbose:
                print(f"[*] Web service scan of {target}")
        else:
            print(f"Error: Unknown mode '{mode}'")
            return None
        
        # Add custom ports if specified
        if ports and mode != 'web':
            cmd.extend(['-p', ports])
        
        # Add target
        cmd.append(target)
        
        # Check if we need sudo for SYN scans
        if '-sS' in cmd and not self._is_root():
            cmd = ['sudo'] + cmd
        
        try:
            # Execute scan
            if verbose:
                print(f"[*] Running: {' '.join(cmd)}")
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                print(f"Error: Scan failed - {stderr.decode()}")
                return None
            
            # Parse results
            results = self._parse_output(stdout.decode())
            results['scan_info'] = {
                'target': target,
                'mode': mode,
                'timestamp': datetime.now().isoformat(),
                'command': ' '.join(cmd)
            }
            
            # Display results
            self._display_results(results)
            
            # Save results
            if output_file:
                self._save_results(results, output_file)
                print(f"\n[+] Results saved to {output_file}")
            
            return results
            
        except Exception as e:
            print(f"Error: {str(e)}")
            return None
    
    def _parse_output(self, output: str) -> dict:
        """Parse nmap output"""
        results = {
            'hosts': [],
            'services': {},
            'vulnerabilities': []
        }
        
        current_host = None
        current_port = None
        
        for line in output.split('\n'):
            # Host discovery
            if 'Nmap scan report for' in line:
                host = line.split('for ')[-1]
                current_host = host
                results['hosts'].append({
                    'address': host,
                    'status': 'up',
                    'ports': []
                })
            
            # Port discovery
            elif current_host and '/tcp' in line and 'open' in line:
                parts = line.split()
                port_info = parts[0].split('/')
                port = port_info[0]
                state = parts[1]
                service = parts[2] if len(parts) > 2 else 'unknown'
                version = ' '.join(parts[3:]) if len(parts) > 3 else ''
                
                port_data = {
                    'port': int(port),
                    'state': state,
                    'service': service,
                    'version': version
                }
                
                # Add to current host
                for host in results['hosts']:
                    if host['address'] == current_host:
                        host['ports'].append(port_data)
                        break
                
                # Track services
                if service not in results['services']:
                    results['services'][service] = []
                results['services'][service].append({
                    'host': current_host,
                    'port': port,
                    'version': version
                })
            
            # OS detection
            elif current_host and 'OS:' in line:
                os_info = line.split('OS:')[1].strip()
                for host in results['hosts']:
                    if host['address'] == current_host:
                        host['os'] = os_info
                        break
            
            # Script output (vulnerabilities)
            elif '| ' in line and current_host:
                script_output = line.strip('| ')
                if any(vuln_keyword in script_output.lower() for vuln_keyword in 
                       ['vulnerable', 'vulnerability', 'cve-', 'exploit']):
                    results['vulnerabilities'].append({
                        'host': current_host,
                        'description': script_output
                    })
        
        return results
    
    def _display_results(self, results: dict):
        """Display scan results"""
        print("\n=== Scan Results ===")
        print(f"Scan completed at: {results['scan_info']['timestamp']}")
        
        # Summary
        total_hosts = len(results['hosts'])
        total_ports = sum(len(host['ports']) for host in results['hosts'])
        
        print(f"\nSummary:")
        print(f"  Hosts found: {total_hosts}")
        print(f"  Open ports: {total_ports}")
        print(f"  Services identified: {len(results['services'])}")
        
        # Detailed results per host
        for host in results['hosts']:
            print(f"\n[+] {host['address']}")
            
            if 'os' in host:
                print(f"    OS: {host['os']}")
            
            if host['ports']:
                print("    Open ports:")
                for port in sorted(host['ports'], key=lambda x: x['port']):
                    version_str = f" ({port['version']})" if port['version'] else ""
                    print(f"      {port['port']}/tcp - {port['service']}{version_str}")
            else:
                print("    No open ports found")
        
        # Services summary
        if results['services']:
            print("\nServices found:")
            for service, instances in results['services'].items():
                print(f"  {service}: {len(instances)} instance(s)")
        
        # Vulnerabilities
        if results['vulnerabilities']:
            print(f"\n[!] Potential vulnerabilities found: {len(results['vulnerabilities'])}")
            for vuln in results['vulnerabilities'][:5]:  # Show first 5
                print(f"    - {vuln['host']}: {vuln['description'][:80]}...")
    
    def _save_results(self, results: dict, filename: str):
        """Save results to file"""
        # Ensure .json extension
        if not filename.endswith('.json'):
            filename += '.json'
        
        with open(filename, 'w') as f:
            json.dump(results, f, indent=2)
    
    def _is_root(self) -> bool:
        """Check if running as root"""
        import os
        return os.geteuid() == 0


async def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='Security Scanner - Network discovery and port scanning',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Scan modes:
  quick    Fast scan of common ports (default)
  full     Complete scan of all ports with service detection
  stealth  Slow, stealthy scan to avoid detection
  web      Scan for web services and vulnerabilities

Examples:
  sec-scan 192.168.1.1                    # Quick scan
  sec-scan 192.168.1.0/24 -m full         # Full network scan
  sec-scan example.com -m web             # Web service scan
  sec-scan 10.0.0.1 -p 22,80,443          # Specific ports
  sec-scan 10.0.0.1 -o results.json       # Save results
  sec-scan 10.0.0.1 -m stealth -v         # Verbose stealth scan
        """
    )
    
    parser.add_argument('target', help='Target IP, hostname, or CIDR range')
    parser.add_argument('-m', '--mode', default='quick',
                       choices=['quick', 'full', 'stealth', 'web'],
                       help='Scan mode (default: quick)')
    parser.add_argument('-p', '--ports', 
                       help='Specific ports to scan (e.g., 22,80,443)')
    parser.add_argument('-o', '--output', 
                       help='Save results to file')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Verbose output')
    
    args = parser.parse_args()
    
    # Check dependencies
    try:
        subprocess.run(['which', 'nmap'], check=True, capture_output=True)
    except:
        print("Error: nmap is not installed")
        print("Install with: sudo apt-get install nmap")
        sys.exit(1)
    
    # Run scan
    scanner = SecurityScanner()
    await scanner.scan(
        target=args.target,
        mode=args.mode,
        ports=args.ports,
        output_file=args.output,
        verbose=args.verbose
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nScan cancelled by user")
        sys.exit(0)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)