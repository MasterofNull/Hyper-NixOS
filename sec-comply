#!/bin/bash
# Security Compliance Checker
# Simple interface for compliance scanning

set -e

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPLIANCE_DIR="${COMPLIANCE_DIR:-/var/log/security/compliance}"
POLICIES_DIR="${POLICIES_DIR:-$SCRIPT_DIR/policies}"

# Ensure directories exist
mkdir -p "$COMPLIANCE_DIR" 2>/dev/null || true

# Show usage
usage() {
    cat << EOF
Security Compliance Checker

Usage: sec-comply [command] [options]

Commands:
  scan [framework]    Run compliance scan (cis, nist, basic)
  report [format]     Generate compliance report (text, json, html)
  list               List available frameworks
  status             Show compliance status
  fix                Show how to fix issues

Examples:
  sec-comply                    # Interactive mode
  sec-comply scan               # Scan with default framework
  sec-comply scan cis           # Run CIS benchmark scan
  sec-comply report             # Generate text report
  sec-comply report html        # Generate HTML report
  sec-comply fix                # Show remediation steps

EOF
}

# List available frameworks
list_frameworks() {
    echo -e "${BLUE}Available Compliance Frameworks:${NC}"
    echo
    echo "  basic    - Basic security baseline (default)"
    echo "  cis      - CIS Benchmark"
    echo "  nist     - NIST guidelines"
    echo "  custom   - Custom policies"
    echo
    echo "Policy files in: $POLICIES_DIR"
}

# Run compliance scan
run_scan() {
    local framework="${1:-basic}"
    
    echo -e "${YELLOW}Running $framework compliance scan...${NC}"
    echo
    
    # Use Python compliance checker if available
    if [[ -x "$SCRIPT_DIR/compliance-checking-framework.py" ]]; then
        python3 "$SCRIPT_DIR/compliance-checking-framework.py" \
            --framework "$framework" \
            --output json \
            --output-file "$COMPLIANCE_DIR/scan_${framework}_$(date +%Y%m%d_%H%M%S).json"
    else
        # Fallback to basic shell checks
        run_basic_scan
    fi
    
    # Show summary
    show_scan_summary "$framework"
}

# Basic compliance scan (fallback)
run_basic_scan() {
    local passed=0
    local failed=0
    
    echo "Running basic security compliance checks..."
    echo
    
    # Check 1: System updates
    echo -n "Checking for system updates... "
    if [[ $(apt list --upgradable 2>/dev/null | grep -c upgradable) -gt 1 ]]; then
        echo -e "${RED}FAIL${NC} - Updates available"
        ((failed++))
    else
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    fi
    
    # Check 2: Firewall status
    echo -n "Checking firewall status... "
    if sudo ufw status 2>/dev/null | grep -q "Status: active"; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC} - Firewall not active"
        ((failed++))
    fi
    
    # Check 3: SSH configuration
    echo -n "Checking SSH configuration... "
    if [[ -f /etc/ssh/sshd_config ]]; then
        if grep -q "^PermitRootLogin no" /etc/ssh/sshd_config; then
            echo -e "${GREEN}PASS${NC}"
            ((passed++))
        else
            echo -e "${YELLOW}WARN${NC} - Root login may be enabled"
            ((failed++))
        fi
    else
        echo -e "${YELLOW}SKIP${NC} - SSH not configured"
    fi
    
    # Check 4: Critical file permissions
    echo -n "Checking critical file permissions... "
    local perm_issues=0
    [[ -f /etc/passwd && $(stat -c %a /etc/passwd) != "644" ]] && ((perm_issues++))
    [[ -f /etc/shadow && $(stat -c %a /etc/shadow) != "640" ]] && ((perm_issues++))
    
    if [[ $perm_issues -eq 0 ]]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC} - $perm_issues permission issues"
        ((failed++))
    fi
    
    # Check 5: Unattended upgrades
    echo -n "Checking automatic updates... "
    if command -v unattended-upgrades >/dev/null 2>&1; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${YELLOW}WARN${NC} - Not configured"
        ((failed++))
    fi
    
    # Summary
    echo
    echo "Compliance Summary:"
    echo "  Passed: $passed"
    echo "  Failed: $failed"
    echo "  Score: $(( passed * 100 / (passed + failed) ))%"
    
    # Save results
    cat > "$COMPLIANCE_DIR/scan_basic_$(date +%Y%m%d_%H%M%S).json" << EOF
{
  "framework": "basic",
  "timestamp": "$(date -Iseconds)",
  "summary": {
    "passed": $passed,
    "failed": $failed,
    "score": $(( passed * 100 / (passed + failed) ))
  }
}
EOF
}

# Show scan summary
show_scan_summary() {
    local framework="$1"
    local latest_scan=$(ls -t "$COMPLIANCE_DIR"/scan_${framework}_*.json 2>/dev/null | head -1)
    
    if [[ -f "$latest_scan" ]]; then
        echo
        echo "Scan Summary:"
        
        # Extract key metrics
        local score=$(jq -r '.compliance_score // .summary.score' "$latest_scan" 2>/dev/null || echo "N/A")
        local passed=$(jq -r '.summary.passed // .passed_checks' "$latest_scan" 2>/dev/null || echo "0")
        local failed=$(jq -r '.summary.failed // .failed_checks' "$latest_scan" 2>/dev/null || echo "0")
        
        echo -e "  Compliance Score: ${BLUE}${score}%${NC}"
        echo -e "  Passed Checks: ${GREEN}${passed}${NC}"
        echo -e "  Failed Checks: ${RED}${failed}${NC}"
        
        # Show critical issues
        local critical=$(jq -r '.summary.critical // 0' "$latest_scan" 2>/dev/null)
        if [[ "$critical" != "0" && "$critical" != "null" ]]; then
            echo -e "  ${RED}Critical Issues: ${critical}${NC}"
        fi
        
        echo
        echo "Full report: $latest_scan"
    fi
}

# Generate report
generate_report() {
    local format="${1:-text}"
    local framework="${2:-basic}"
    
    echo -e "${YELLOW}Generating $format report...${NC}"
    
    # Find latest scan
    local latest_scan=$(ls -t "$COMPLIANCE_DIR"/scan_${framework}_*.json 2>/dev/null | head -1)
    
    if [[ -z "$latest_scan" ]]; then
        echo -e "${RED}No scan results found for $framework${NC}"
        echo "Run a scan first: sec-comply scan $framework"
        return 1
    fi
    
    local report_file="$COMPLIANCE_DIR/report_${framework}_$(date +%Y%m%d_%H%M%S).$format"
    
    case "$format" in
        text)
            generate_text_report "$latest_scan" > "$report_file"
            cat "$report_file"
            ;;
        json)
            cp "$latest_scan" "$report_file"
            echo "JSON report: $report_file"
            ;;
        html)
            generate_html_report "$latest_scan" > "$report_file"
            echo "HTML report: $report_file"
            # Try to open in browser
            if command -v xdg-open >/dev/null 2>&1; then
                xdg-open "$report_file" 2>/dev/null
            fi
            ;;
        *)
            echo -e "${RED}Unknown format: $format${NC}"
            return 1
            ;;
    esac
}

# Generate text report
generate_text_report() {
    local scan_file="$1"
    
    echo "Security Compliance Report"
    echo "========================="
    echo
    echo "Generated: $(date)"
    echo "Framework: $(jq -r '.framework' "$scan_file")"
    echo
    
    # Summary
    local score=$(jq -r '.compliance_score // .summary.score' "$scan_file")
    local passed=$(jq -r '.summary.passed // .passed_checks' "$scan_file")
    local failed=$(jq -r '.summary.failed // .failed_checks' "$scan_file")
    
    echo "Summary:"
    echo "  Compliance Score: ${score}%"
    echo "  Passed Checks: $passed"
    echo "  Failed Checks: $failed"
    echo
    
    # Failed checks
    if [[ "$failed" != "0" ]]; then
        echo "Failed Checks:"
        echo "--------------"
        # This would parse detailed results from the JSON
        echo "(Run with --json for detailed results)"
    fi
    
    echo
    echo "Recommendations:"
    echo "1. Address all critical and high severity findings"
    echo "2. Review and update security policies regularly"
    echo "3. Schedule regular compliance scans"
}

# Generate HTML report
generate_html_report() {
    local scan_file="$1"
    
    cat << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Security Compliance Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
        .summary { margin: 20px 0; }
        .pass { color: green; }
        .fail { color: red; }
        .score { font-size: 48px; font-weight: bold; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Security Compliance Report</h1>
        <p>Generated: $(date)</p>
    </div>
    
    <div class="summary">
        <h2>Compliance Score</h2>
        <div class="score">$(jq -r '.compliance_score // .summary.score' "$scan_file")%</div>
    </div>
    
    <h2>Summary</h2>
    <table>
        <tr>
            <th>Metric</th>
            <th>Value</th>
        </tr>
        <tr>
            <td>Passed Checks</td>
            <td class="pass">$(jq -r '.summary.passed // .passed_checks' "$scan_file")</td>
        </tr>
        <tr>
            <td>Failed Checks</td>
            <td class="fail">$(jq -r '.summary.failed // .failed_checks' "$scan_file")</td>
        </tr>
    </table>
</body>
</html>
EOF
}

# Show compliance status
show_status() {
    echo -e "${BLUE}Compliance Status${NC}"
    echo "================="
    echo
    
    # Show recent scans
    echo "Recent Scans:"
    ls -lt "$COMPLIANCE_DIR"/scan_*.json 2>/dev/null | head -5 | while read -r line; do
        file=$(echo "$line" | awk '{print $NF}')
        if [[ -f "$file" ]]; then
            framework=$(echo "$file" | sed 's/.*scan_\([^_]*\)_.*/\1/')
            timestamp=$(echo "$file" | sed 's/.*_\([0-9]*\)\.json/\1/')
            score=$(jq -r '.compliance_score // .summary.score // "N/A"' "$file" 2>/dev/null)
            
            # Format timestamp
            if [[ ${#timestamp} -eq 14 ]]; then
                date_str="${timestamp:0:4}-${timestamp:4:2}-${timestamp:6:2} ${timestamp:8:2}:${timestamp:10:2}"
            else
                date_str="$timestamp"
            fi
            
            echo "  $date_str | $framework | Score: ${score}%"
        fi
    done
    
    echo
    echo "Reports available in: $COMPLIANCE_DIR"
}

# Show fix recommendations
show_fixes() {
    echo -e "${BLUE}Compliance Fix Recommendations${NC}"
    echo "=============================="
    echo
    
    # Find latest scan with failures
    local latest_scan=$(ls -t "$COMPLIANCE_DIR"/scan_*.json 2>/dev/null | head -1)
    
    if [[ -z "$latest_scan" ]]; then
        echo "No scan results found. Run a scan first."
        return 1
    fi
    
    echo "Common fixes for compliance issues:"
    echo
    echo "1. System Updates:"
    echo "   sudo apt update && sudo apt upgrade"
    echo
    echo "2. Enable Firewall:"
    echo "   sudo ufw enable"
    echo "   sudo ufw default deny incoming"
    echo "   sudo ufw default allow outgoing"
    echo "   sudo ufw allow ssh"
    echo
    echo "3. SSH Hardening:"
    echo "   Edit /etc/ssh/sshd_config:"
    echo "   - PermitRootLogin no"
    echo "   - PasswordAuthentication no"
    echo "   - Protocol 2"
    echo
    echo "4. File Permissions:"
    echo "   sudo chmod 644 /etc/passwd"
    echo "   sudo chmod 640 /etc/shadow"
    echo "   sudo chmod 600 /etc/ssh/sshd_config"
    echo
    echo "5. Enable Automatic Updates:"
    echo "   sudo apt install unattended-upgrades"
    echo "   sudo dpkg-reconfigure unattended-upgrades"
    echo
    echo "Run 'sec-comply scan' after applying fixes to verify."
}

# Interactive mode
interactive() {
    while true; do
        echo
        echo -e "${BLUE}Security Compliance Checker${NC}"
        echo "=========================="
        echo
        echo "1. Run compliance scan"
        echo "2. Generate report"
        echo "3. Show status"
        echo "4. Show fix recommendations"
        echo "5. List frameworks"
        echo "0. Exit"
        echo
        read -p "Select option: " choice
        
        case $choice in
            1)
                echo
                list_frameworks
                read -p "Select framework (basic): " framework
                framework="${framework:-basic}"
                run_scan "$framework"
                ;;
            2)
                echo
                echo "Report formats: text, json, html"
                read -p "Select format (text): " format
                format="${format:-text}"
                generate_report "$format"
                ;;
            3)
                show_status
                ;;
            4)
                show_fixes
                ;;
            5)
                list_frameworks
                ;;
            0)
                echo "Goodbye!"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                ;;
        esac
        
        echo
        read -p "Press Enter to continue..."
    done
}

# Main execution
main() {
    case "${1:-}" in
        scan)
            shift
            run_scan "$@"
            ;;
        report)
            shift
            generate_report "$@"
            ;;
        list)
            list_frameworks
            ;;
        status)
            show_status
            ;;
        fix)
            show_fixes
            ;;
        help|--help|-h)
            usage
            ;;
        "")
            interactive
            ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            echo
            usage
            exit 1
            ;;
    esac
}

# Check for required tools
if ! command -v jq >/dev/null 2>&1; then
    echo -e "${YELLOW}Warning: jq not installed. Some features may not work.${NC}"
    echo "Install with: sudo apt install jq"
fi

# Run main
main "$@"