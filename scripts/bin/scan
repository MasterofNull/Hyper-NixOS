#!/usr/bin/env python3
"""
Network Scanner - Find devices and services
Usage: scan [target] [options]
"""

import asyncio
import subprocess
import json
import argparse
import sys
from datetime import datetime

class Scanner:
    """Simple network scanner"""
    
    async def scan(self, target: str, quick: bool = True, ports: str = None, 
                   save: str = None, quiet: bool = False):
        """Scan network target"""
        
        # Build nmap command
        cmd = ['nmap']
        
        # Quick vs thorough scan
        if quick:
            cmd.extend(['-F'])  # Fast scan top 100 ports
            if not quiet:
                print(f"üîç Quick scanning {target}...")
        else:
            cmd.extend(['-p-', '-sV'])  # All ports with service detection
            if not quiet:
                print(f"üîç Deep scanning {target} (this may take a while)...")
        
        # Custom ports
        if ports:
            cmd.extend(['-p', ports])
            if not quiet:
                print(f"   Checking ports: {ports}")
        
        # Add target
        cmd.append(target)
        
        # Check if we need sudo
        if not self._is_root() and '-sS' in cmd:
            cmd = ['sudo'] + cmd
        
        try:
            # Run scan
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                print(f"‚ùå Scan failed: {stderr.decode()}")
                return None
            
            # Parse results
            results = self._parse_results(stdout.decode())
            
            # Display results
            if not quiet:
                self._show_results(results)
            
            # Save if requested
            if save:
                self._save_results(results, save)
                print(f"üíæ Results saved to {save}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            return None
    
    def _parse_results(self, output: str) -> dict:
        """Parse scan output into simple format"""
        results = {
            'scan_time': datetime.now().isoformat(),
            'hosts': {},
            'summary': {
                'total_hosts': 0,
                'total_ports': 0,
                'total_services': 0
            }
        }
        
        current_host = None
        
        for line in output.split('\n'):
            # Found host
            if 'Nmap scan report for' in line:
                host = line.split()[-1]
                current_host = host
                results['hosts'][host] = {
                    'status': 'up',
                    'ports': {},
                    'info': {}
                }
                results['summary']['total_hosts'] += 1
            
            # Found open port
            elif current_host and 'open' in line and '/' in line:
                parts = line.split()
                if len(parts) >= 3:
                    port_proto = parts[0]
                    port = port_proto.split('/')[0]
                    state = parts[1]
                    service = parts[2] if len(parts) > 2 else 'unknown'
                    
                    # Get version info if available
                    version = ' '.join(parts[3:]) if len(parts) > 3 else ''
                    
                    results['hosts'][current_host]['ports'][port] = {
                        'state': state,
                        'service': service,
                        'version': version
                    }
                    results['summary']['total_ports'] += 1
                    if service != 'unknown':
                        results['summary']['total_services'] += 1
            
            # OS detection
            elif current_host and 'OS:' in line:
                os_info = line.split('OS:')[1].strip()
                results['hosts'][current_host]['info']['os'] = os_info
        
        return results
    
    def _show_results(self, results: dict):
        """Display results in user-friendly format"""
        print(f"\n‚úÖ Scan Complete\n")
        
        summary = results['summary']
        print(f"üìä Summary:")
        print(f"   Hosts found: {summary['total_hosts']}")
        print(f"   Open ports: {summary['total_ports']}")
        print(f"   Services identified: {summary['total_services']}")
        
        # Show each host
        for host, data in results['hosts'].items():
            print(f"\nüñ•Ô∏è  {host}")
            
            if data['info'].get('os'):
                print(f"   OS: {data['info']['os']}")
            
            if data['ports']:
                print("   Open ports:")
                for port, info in sorted(data['ports'].items(), key=lambda x: int(x[0])):
                    service = info['service']
                    version = info['version']
                    
                    if version:
                        print(f"      {port} ‚Üí {service} ({version})")
                    else:
                        print(f"      {port} ‚Üí {service}")
            else:
                print("   No open ports found")
    
    def _save_results(self, results: dict, filename: str):
        """Save results to file"""
        with open(filename, 'w') as f:
            json.dump(results, f, indent=2)
    
    def _is_root(self) -> bool:
        """Check if running as root"""
        import os
        return os.geteuid() == 0


async def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='Network Scanner - Find devices and services',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  scan 192.168.1.1              # Quick scan single host
  scan 192.168.1.0/24           # Scan network range  
  scan example.com              # Scan domain
  scan 10.0.0.5 --deep          # Thorough scan (all ports)
  scan 10.0.0.5 --ports 80,443  # Scan specific ports
  scan 10.0.0.5 --save results  # Save to results.json
  
Common port numbers:
  22    SSH          80    HTTP        443   HTTPS
  3306  MySQL        5432  PostgreSQL  6379  Redis
  3389  RDP          8080  HTTP-alt    27017 MongoDB
        """
    )
    
    parser.add_argument('target', help='IP address, hostname, or network range')
    parser.add_argument('--deep', action='store_true', 
                       help='Deep scan all ports (slower but thorough)')
    parser.add_argument('--ports', '-p', 
                       help='Specific ports to scan (e.g., 22,80,443)')
    parser.add_argument('--save', '-s', 
                       help='Save results to file')
    parser.add_argument('--quiet', '-q', action='store_true',
                       help='Minimal output')
    
    args = parser.parse_args()
    
    # Validate target
    if not args.target:
        print("‚ùå Error: No target specified")
        parser.print_help()
        sys.exit(1)
    
    # Check if nmap is installed
    try:
        subprocess.run(['which', 'nmap'], check=True, capture_output=True)
    except:
        print("‚ùå Error: nmap not installed")
        print("   Install with: sudo apt install nmap")
        sys.exit(1)
    
    # Run scan
    scanner = Scanner()
    await scanner.scan(
        target=args.target,
        quick=not args.deep,
        ports=args.ports,
        save=args.save,
        quiet=args.quiet
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Scan cancelled")
        sys.exit(0)