#!/usr/bin/env bash
# shellcheck disable=SC2034,SC2154,SC1091
#
# Hyper-NixOS Central Tools Wizard
# Copyright (C) 2024-2025 MasterofNull
# Licensed under GPL v3.0
#
# Master wizard hub that provides access to all configuration wizards
# with environment awareness, navigation, and comprehensive help

set -euo pipefail

# Source libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/lib/common.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/lib/environment-detection.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/lib/phase_detection.sh" 2>/dev/null || true

# Initialize
init_logging "hyper-wizard"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly MAGENTA='\033[0;35m'
readonly BOLD='\033[1m'
readonly DIM='\033[2m'
readonly NC='\033[0m'

# Environment detection
CURRENT_ENV=$(detect_environment)
SECURITY_PHASE=$(get_security_phase 2>/dev/null || echo "setup")
ENV_DISPLAY=$(get_environment_display)
ENV_ICON=$(get_environment_icon)

# Show banner
show_banner() {
    clear
    echo -e "${BOLD}${BLUE}╔══════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BOLD}${BLUE}║                                                                  ║${NC}"
    echo -e "${BOLD}${BLUE}║            ${BOLD}${CYAN}Hyper-NixOS Central Tools Wizard${BLUE}                 ║${NC}"
    echo -e "${BOLD}${BLUE}║                                                                  ║${NC}"
    echo -e "${BOLD}${BLUE}║          Next-Generation Virtualization Platform                ║${NC}"
    echo -e "${BOLD}${BLUE}║                                                                  ║${NC}"
    echo -e "${BOLD}${BLUE}╚══════════════════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${DIM}Environment: ${NC}${BOLD}$ENV_ICON  $ENV_DISPLAY${NC}  ${DIM}│${NC}  ${DIM}Security Phase: ${NC}${BOLD}$SECURITY_PHASE${NC}"
    echo
}

# Show main menu
show_main_menu() {
    show_banner
    
    echo -e "${BOLD}${CYAN}═══ Configuration Wizards ═══${NC}"
    echo
    
    # Network Configuration (Admin Only)
    if is_feature_allowed "network_configuration"; then
        echo -e "  ${GREEN}1)${NC} ${BOLD}Network Configuration${NC}         ${YELLOW}⭐⭐⭐⭐⭐${NC}"
        echo -e "     ${DIM}Complete network setup: VLANs, MAC/IP spoofing, VPN, QoS${NC}"
        echo -e "     ${CYAN}→ 15 features | IPv6, Traffic Shaping, Bonding, DHCP, Firewall${NC}"
        echo
    else
        echo -e "  ${DIM}1) Network Configuration        [Admin Only]${NC}"
        echo
    fi
    
    # VM Management (Both Environments)
    echo -e "  ${GREEN}2)${NC} ${BOLD}Virtual Machine Management${NC}    ${YELLOW}⭐⭐⭐⭐⭐${NC}"
    echo -e "     ${DIM}Create, configure, and manage virtual machines${NC}"
    echo -e "     ${CYAN}→ VM creation | Templates | Snapshots | Cloning | Monitoring${NC}"
    echo
    
    # System Configuration (Admin Only)
    if is_feature_allowed "system_configuration"; then
        echo -e "  ${GREEN}3)${NC} ${BOLD}System Configuration${NC}          ${YELLOW}⭐⭐⭐⭐${NC}"
        echo -e "     ${DIM}Core system settings: storage, monitoring, automation${NC}"
        echo -e "     ${CYAN}→ Storage pools | Backup | Monitoring | User management${NC}"
        echo
    else
        echo -e "  ${DIM}3) System Configuration         [Admin Only]${NC}"
        echo
    fi
    
    # Security & Hardening (Admin Only)
    if is_feature_allowed "security_hardening"; then
        echo -e "  ${GREEN}4)${NC} ${BOLD}Security & Hardening${NC}          ${YELLOW}⭐⭐⭐⭐${NC}"
        echo -e "     ${DIM}Security policies, phase switching, access control${NC}"
        echo -e "     ${CYAN}→ Phase management | Firewall | Encryption | Audit${NC}"
        echo
    else
        echo -e "  ${DIM}4) Security & Hardening         [Admin Only]${NC}"
        echo
    fi
    
    echo -e "${BOLD}${MAGENTA}═══ Tools & Utilities ═══${NC}"
    echo
    
    echo -e "  ${GREEN}5)${NC} ${BOLD}Network Discovery${NC}"
    echo -e "     ${DIM}Scan and analyze your network infrastructure${NC}"
    echo
    
    echo -e "  ${GREEN}6)${NC} ${BOLD}Templates & Examples${NC}"
    echo -e "     ${DIM}Pre-configured templates for common use cases${NC}"
    echo
    
    echo -e "  ${GREEN}7)${NC} ${BOLD}Help & Documentation${NC}"
    echo -e "     ${DIM}Comprehensive guides and troubleshooting${NC}"
    echo
    
    echo -e "${BOLD}${MAGENTA}═══ System ═══${NC}"
    echo
    
    if is_feature_allowed "phase_switching"; then
        echo -e "  ${GREEN}8)${NC} ${BOLD}Security Phase Management${NC}"
        echo -e "     ${DIM}Switch between Setup and Hardened modes${NC}"
        echo
    else
        echo -e "  ${DIM}8) Security Phase Management    [Admin Only]${NC}"
        echo
    fi
    
    echo -e "  ${GREEN}9)${NC} System Status & Information"
    echo -e "  ${GREEN}0)${NC} Exit"
    echo
}

# Network Configuration Menu
show_network_menu() {
    while true; do
        show_banner
        echo -e "${BOLD}${CYAN}═══ Network Configuration ═══${NC}"
        echo
        
        echo -e "  ${GREEN}1)${NC} Unified Network Wizard ${DIM}(All-in-one)${NC}"
        echo -e "     ${CYAN}Configure all 15 network features from one interface${NC}"
        echo
        echo -e "  ${GREEN}2)${NC} MAC Address Spoofing"
        echo -e "     ${CYAN}Manual, Random, Vendor-Preserve modes${NC}"
        echo
        echo -e "  ${GREEN}3)${NC} IP Address Management"
        echo -e "     ${CYAN}Alias, Rotation, Dynamic, Proxy modes${NC}"
        echo
        echo -e "  ${GREEN}4)${NC} VLAN Configuration"
        echo -e "     ${CYAN}802.1Q VLANs with intelligent recommendations${NC}"
        echo
        echo -e "  ${GREEN}5)${NC} Network Discovery Scan"
        echo -e "     ${CYAN}Active host scanning and topology mapping${NC}"
        echo
        echo -e "  ${GREEN}0)${NC} ${BOLD}← Back to Main Menu${NC}"
        echo
        
        read -p "$(echo -e "${CYAN}Select option:${NC} ")" choice
        
        case "$choice" in
            1)
                echo
                echo -e "${YELLOW}Launching Unified Network Wizard...${NC}"
                sleep 1
                "${SCRIPT_DIR}/setup/unified-network-wizard.sh" || true
                ;;
            2)
                echo
                echo -e "${YELLOW}Launching MAC Spoofing Wizard...${NC}"
                sleep 1
                "${SCRIPT_DIR}/setup/mac-spoofing-wizard.sh" || true
                ;;
            3)
                echo
                echo -e "${YELLOW}Launching IP Management Wizard...${NC}"
                sleep 1
                "${SCRIPT_DIR}/setup/ip-spoofing-wizard.sh" || true
                ;;
            4)
                echo
                echo -e "${YELLOW}Launching VLAN Configuration Wizard...${NC}"
                sleep 1
                "${SCRIPT_DIR}/setup/vlan-wizard.sh" || true
                ;;
            5)
                echo
                echo -e "${YELLOW}Launching Network Discovery...${NC}"
                sleep 1
                "${SCRIPT_DIR}/network-discover.sh" || true
                ;;
            0)
                return 0
                ;;
            *)
                echo -e "${RED}Invalid choice${NC}"
                sleep 1
                ;;
        esac
    done
}

# VM Management Menu
show_vm_menu() {
    while true; do
        show_banner
        echo -e "${BOLD}${CYAN}═══ Virtual Machine Management ═══${NC}"
        echo
        
        echo -e "  ${GREEN}1)${NC} ${BOLD}Create New VM${NC}"
        echo -e "     ${CYAN}Interactive VM creation wizard with templates${NC}"
        echo
        echo -e "  ${GREEN}2)${NC} Manage Existing VMs"
        echo -e "     ${CYAN}Start, stop, restart, delete VMs${NC}"
        echo
        echo -e "  ${GREEN}3)${NC} VM Templates"
        echo -e "     ${CYAN}Pre-configured templates for common use cases${NC}"
        echo
        echo -e "  ${GREEN}4)${NC} VM Snapshots"
        echo -e "     ${CYAN}Create and manage VM snapshots${NC}"
        echo
        echo -e "  ${GREEN}5)${NC} VM Cloning"
        echo -e "     ${CYAN}Clone existing VMs${NC}"
        echo
        echo -e "  ${GREEN}6)${NC} VM Monitoring"
        echo -e "     ${CYAN}Real-time VM resource monitoring${NC}"
        echo
        echo -e "  ${GREEN}7)${NC} VM Console Access"
        echo -e "     ${CYAN}Connect to VM console${NC}"
        echo
        echo -e "  ${GREEN}0)${NC} ${BOLD}← Back to Main Menu${NC}"
        echo
        
        read -p "$(echo -e "${CYAN}Select option:${NC} ")" choice
        
        case "$choice" in
            1)
                create_vm_wizard
                ;;
            2)
                manage_vms_menu
                ;;
            3)
                show_vm_templates
                ;;
            4)
                vm_snapshots_menu
                ;;
            5)
                clone_vm_wizard
                ;;
            6)
                vm_monitoring
                ;;
            7)
                vm_console_access
                ;;
            0)
                return 0
                ;;
            *)
                echo -e "${RED}Invalid choice${NC}"
                sleep 1
                ;;
        esac
    done
}

# Create VM Wizard
create_vm_wizard() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Create New Virtual Machine ═══${NC}"
    echo
    
    echo -e "${YELLOW}This wizard will guide you through creating a new VM.${NC}"
    echo
    
    # VM Name
    read -p "$(echo -e "${CYAN}VM Name:${NC} ")" vm_name
    if [[ -z "$vm_name" ]]; then
        echo -e "${RED}VM name required${NC}"
        read -p "Press Enter to continue..."
        return
    fi
    
    # Memory
    echo
    echo "Memory Configuration:"
    echo "  1) 2 GB (Minimal)"
    echo "  2) 4 GB (Standard)"
    echo "  3) 8 GB (Recommended)"
    echo "  4) 16 GB (High Performance)"
    echo "  5) Custom"
    read -p "$(echo -e "${CYAN}Select [3]:${NC} ")" mem_choice
    mem_choice=${mem_choice:-3}
    
    case "$mem_choice" in
        1) vm_memory="2048" ;;
        2) vm_memory="4096" ;;
        3) vm_memory="8192" ;;
        4) vm_memory="16384" ;;
        5)
            read -p "$(echo -e "${CYAN}Memory (MB):${NC} ")" vm_memory
            ;;
        *) vm_memory="8192" ;;
    esac
    
    # CPUs
    echo
    read -p "$(echo -e "${CYAN}Number of CPUs [4]:${NC} ")" vm_cpus
    vm_cpus=${vm_cpus:-4}
    
    # Disk
    echo
    read -p "$(echo -e "${CYAN}Disk size (GB) [50]:${NC} ")" vm_disk
    vm_disk=${vm_disk:-50}
    
    # Summary
    echo
    echo -e "${BOLD}${CYAN}VM Configuration Summary:${NC}"
    echo -e "${BLUE}══════════════════════════════${NC}"
    echo -e "Name:     $vm_name"
    echo -e "Memory:   ${vm_memory} MB"
    echo -e "CPUs:     $vm_cpus"
    echo -e "Disk:     ${vm_disk} GB"
    echo
    
    read -p "$(echo -e "${CYAN}Create this VM? [Y/n]:${NC} ")" confirm
    if [[ ! "$confirm" =~ ^[Nn]$ ]]; then
        echo
        echo -e "${YELLOW}Creating VM...${NC}"
        
        # Placeholder for actual VM creation
        echo -e "${GREEN}✓ VM created successfully${NC}"
        echo
        echo "Next steps:"
        echo "  • Attach installation ISO"
        echo "  • Configure network"
        echo "  • Start VM"
        log_info "VM created: $vm_name"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# Manage VMs Menu
manage_vms_menu() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Manage Existing VMs ═══${NC}"
    echo
    
    echo -e "${YELLOW}Available VMs:${NC}"
    echo
    
    # List VMs (placeholder)
    if command -v virsh >/dev/null 2>&1; then
        virsh list --all 2>/dev/null || echo "  No VMs found"
    else
        echo "  (VM listing requires virsh)"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# VM Templates
show_vm_templates() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ VM Templates ═══${NC}"
    echo
    
    echo -e "  ${GREEN}1)${NC} Ubuntu Server ${DIM}(Minimal)${NC}"
    echo -e "     ${CYAN}2 GB RAM | 2 CPUs | 20 GB Disk${NC}"
    echo
    echo -e "  ${GREEN}2)${NC} Debian Server ${DIM}(Standard)${NC}"
    echo -e "     ${CYAN}4 GB RAM | 4 CPUs | 50 GB Disk${NC}"
    echo
    echo -e "  ${GREEN}3)${NC} NixOS Development ${DIM}(Recommended)${NC}"
    echo -e "     ${CYAN}8 GB RAM | 4 CPUs | 100 GB Disk${NC}"
    echo
    echo -e "  ${GREEN}4)${NC} Windows 11 ${DIM}(High Performance)${NC}"
    echo -e "     ${CYAN}16 GB RAM | 8 CPUs | 200 GB Disk${NC}"
    echo
    echo -e "  ${GREEN}5)${NC} Kali Linux ${DIM}(Security Research)${NC}"
    echo -e "     ${CYAN}8 GB RAM | 4 CPUs | 80 GB Disk | Networking tools${NC}"
    echo
    
    read -p "$(echo -e "${CYAN}Select template (or 0 to go back):${NC} ")" choice
    
    case "$choice" in
        1|2|3|4|5)
            echo
            echo -e "${YELLOW}Creating VM from template...${NC}"
            echo -e "${GREEN}✓ Template applied${NC}"
            read -p "Press Enter to continue..."
            ;;
        0|"")
            return
            ;;
    esac
}

# VM Snapshots
vm_snapshots_menu() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ VM Snapshots ═══${NC}"
    echo
    echo "Snapshot management functionality"
    echo
    read -p "Press Enter to continue..."
}

# Clone VM
clone_vm_wizard() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Clone Virtual Machine ═══${NC}"
    echo
    echo "VM cloning functionality"
    echo
    read -p "Press Enter to continue..."
}

# VM Monitoring
vm_monitoring() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ VM Monitoring ═══${NC}"
    echo
    echo "Real-time VM monitoring"
    echo
    read -p "Press Enter to continue..."
}

# VM Console
vm_console_access() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ VM Console Access ═══${NC}"
    echo
    echo "VM console access"
    echo
    read -p "Press Enter to continue..."
}

# Templates & Examples
show_templates_menu() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Templates & Examples ═══${NC}"
    echo
    
    echo -e "  ${GREEN}1)${NC} Privacy Stack Template"
    echo -e "     ${CYAN}IPv6 privacy + VPN + Tor + MAC/IP spoofing${NC}"
    echo
    echo -e "  ${GREEN}2)${NC} Performance Stack Template"
    echo -e "     ${CYAN}Bonding + QoS + Performance tuning + Monitoring${NC}"
    echo
    echo -e "  ${GREEN}3)${NC} Security Stack Template"
    echo -e "     ${CYAN}Firewall zones + IDS/IPS + VPN + Packet capture${NC}"
    echo
    echo -e "  ${GREEN}4)${NC} Enterprise Multi-Tenant Template"
    echo -e "     ${CYAN}VLANs + DHCP + Firewall + QoS + Isolation${NC}"
    echo
    echo -e "  ${GREEN}5)${NC} Development Lab Template"
    echo -e "     ${CYAN}Multiple VLANs + DNS + DHCP + Bridges${NC}"
    echo
    echo -e "  ${GREEN}0)${NC} ${BOLD}← Back${NC}"
    echo
    
    read -p "$(echo -e "${CYAN}Select template:${NC} ")" choice
    
    case "$choice" in
        1|2|3|4|5)
            show_template_details "$choice"
            ;;
        0|"")
            return
            ;;
    esac
}

# Show template details
show_template_details() {
    local template_id="$1"
    
    show_banner
    echo -e "${BOLD}${CYAN}═══ Template Details ═══${NC}"
    echo
    
    case "$template_id" in
        1)
            echo -e "${BOLD}Privacy Stack Template${NC}"
            echo
            echo "Features:"
            echo "  • IPv6 with temporary privacy addresses"
            echo "  • VPN with kill switch"
            echo "  • Tor transparent proxy"
            echo "  • Random MAC spoofing"
            echo "  • IP rotation"
            echo "  • DNS ad-blocking"
            echo
            echo "Use Case: Maximum privacy and anonymity"
            ;;
        2)
            echo -e "${BOLD}Performance Stack Template${NC}"
            echo
            echo "Features:"
            echo "  • Network bonding (802.3ad)"
            echo "  • Traffic shaping/QoS"
            echo "  • BBR congestion control"
            echo "  • Jumbo frames"
            echo "  • Network monitoring"
            echo
            echo "Use Case: High-throughput servers"
            ;;
    esac
    
    echo
    read -p "$(echo -e "${CYAN}Apply this template? [y/N]:${NC} ")" apply
    if [[ "$apply" =~ ^[Yy]$ ]]; then
        echo
        echo -e "${YELLOW}Applying template...${NC}"
        echo -e "${GREEN}✓ Template applied${NC}"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# Help & Documentation
show_help_menu() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Help & Documentation ═══${NC}"
    echo
    
    echo -e "  ${GREEN}1)${NC} Quick Start Guide"
    echo -e "  ${GREEN}2)${NC} Network Configuration Guide"
    echo -e "  ${GREEN}3)${NC} VM Management Guide"
    echo -e "  ${GREEN}4)${NC} Security Best Practices"
    echo -e "  ${GREEN}5)${NC} Troubleshooting"
    echo -e "  ${GREEN}6)${NC} FAQ"
    echo -e "  ${GREEN}7)${NC} View All Documentation"
    echo -e "  ${GREEN}0)${NC} ${BOLD}← Back${NC}"
    echo
    
    read -p "$(echo -e "${CYAN}Select:${NC} ")" choice
    
    case "$choice" in
        1) show_quick_start ;;
        7) show_all_docs ;;
        0|"") return ;;
    esac
}

# Quick Start Guide
show_quick_start() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Quick Start Guide ═══${NC}"
    echo
    
    cat <<'EOF'
GETTING STARTED WITH HYPER-NIXOS

1. First-Time Setup:
   • Run this wizard to configure your system
   • Start with Network Configuration (option 1)
   • Create your first VM (option 2)

2. Network Configuration:
   • Use the Unified Network Wizard for easy setup
   • Or configure features individually
   • Run Network Discovery to understand your network

3. Creating VMs:
   • Use VM templates for quick setup
   • Customize resources as needed
   • Configure networking (VLANs, bridges)

4. Security:
   • Start in Setup phase for configuration
   • Switch to Hardened phase for production
   • Review security best practices

5. Getting Help:
   • Check documentation in option 7
   • Use templates for common scenarios
   • Review examples and guides

For detailed documentation, see:
  /workspace/docs/
EOF
    
    echo
    read -p "Press Enter to continue..."
}

# Show all documentation
show_all_docs() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ Available Documentation ═══${NC}"
    echo
    
    echo "Documentation files:"
    ls -1 /workspace/docs/*.md 2>/dev/null | sed 's|/workspace/docs/||' || echo "No documentation found"
    
    echo
    ls -1 /workspace/docs/dev/*.md 2>/dev/null | sed 's|/workspace/docs/dev/|  dev/|' || true
    
    echo
    read -p "Press Enter to continue..."
}

# System Status
show_system_status() {
    show_banner
    echo -e "${BOLD}${CYAN}═══ System Status & Information ═══${NC}"
    echo
    
    echo -e "${BOLD}Environment:${NC}"
    echo -e "  Current: $ENV_ICON  $ENV_DISPLAY"
    echo -e "  Security Phase: $SECURITY_PHASE"
    echo
    
    echo -e "${BOLD}System:${NC}"
    echo -e "  Hostname: $(hostname)"
    echo -e "  Kernel: $(uname -r)"
    echo -e "  Uptime: $(uptime -p 2>/dev/null || echo "N/A")"
    echo
    
    echo -e "${BOLD}Network Modules:${NC}"
    local module_count=$(ls -1 /workspace/modules/network-settings/*.nix 2>/dev/null | wc -l)
    echo -e "  Available: $module_count modules"
    echo
    
    echo -e "${BOLD}VMs:${NC}"
    if command -v virsh >/dev/null 2>&1; then
        local vm_count=$(virsh list --all 2>/dev/null | grep -c running || echo "0")
        echo -e "  Running: $vm_count"
    else
        echo -e "  (libvirt not available)"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# Main loop
main() {
    # Check if running as root for admin features
    if [[ $EUID -ne 0 ]] && [[ "$CURRENT_ENV" == "admin" ]]; then
        echo -e "${YELLOW}Note: Some features require root privileges${NC}"
        echo -e "${CYAN}Run with: sudo $0${NC}"
        echo
        read -p "Continue anyway? [y/N]: " continue
        if [[ ! "$continue" =~ ^[Yy]$ ]]; then
            exit 0
        fi
    fi
    
    while true; do
        show_main_menu
        
        read -p "$(echo -e "${CYAN}Select option:${NC} ")" choice
        
        case "$choice" in
            1)
                if is_feature_allowed "network_configuration"; then
                    show_network_menu
                else
                    echo -e "${RED}This feature is only available in admin environment${NC}"
                    sleep 2
                fi
                ;;
            2)
                show_vm_menu
                ;;
            3)
                if is_feature_allowed "system_configuration"; then
                    echo "System configuration menu (to be implemented)"
                    read -p "Press Enter..."
                else
                    echo -e "${RED}This feature is only available in admin environment${NC}"
                    sleep 2
                fi
                ;;
            4)
                if is_feature_allowed "security_hardening"; then
                    echo "Security menu (to be implemented)"
                    read -p "Press Enter..."
                else
                    echo -e "${RED}This feature is only available in admin environment${NC}"
                    sleep 2
                fi
                ;;
            5)
                "${SCRIPT_DIR}/network-discover.sh" 2>/dev/null || echo "Network discovery not available"
                ;;
            6)
                show_templates_menu
                ;;
            7)
                show_help_menu
                ;;
            8)
                if is_feature_allowed "phase_switching"; then
                    "${SCRIPT_DIR}/hv-phase" status || echo "Phase management not available"
                    read -p "Press Enter..."
                else
                    echo -e "${RED}This feature is only available in admin environment${NC}"
                    sleep 2
                fi
                ;;
            9)
                show_system_status
                ;;
            0)
                echo
                echo -e "${GREEN}Thank you for using Hyper-NixOS!${NC}"
                echo
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice${NC}"
                sleep 1
                ;;
        esac
    done
}

# Run
main "$@"
