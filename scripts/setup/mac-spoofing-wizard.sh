#!/usr/bin/env bash
# shellcheck disable=SC2034,SC2154,SC1091
#
# MAC Address Spoofing Setup Wizard
# Copyright (C) 2024-2025 MasterofNull
# Licensed under GPL v3.0
#
# ⚠️  LEGAL NOTICE ⚠️
# MAC address spoofing should only be used for:
# - Privacy protection on public networks
# - Authorized penetration testing
# - Development and testing environments
# - Network troubleshooting
#
# Unauthorized use may violate network policies, terms of service, or laws.
# The user assumes all responsibility for proper and legal use.

set -euo pipefail

# Source common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../lib/common.sh" 2>/dev/null || {
    echo "Error: Could not source common library"
    exit 1
}

# Initialize
init_logging "mac-spoofing-wizard"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# Configuration
readonly CONFIG_FILE="/etc/hypervisor/network/mac-spoof.conf"
readonly NIC_BACKUP="/var/lib/hypervisor/mac-spoof/original-macs.conf"

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}✗ This wizard must be run as root${NC}"
        echo -e "${CYAN}Please run: sudo $0${NC}"
        exit 1
    fi
}

# Show legal warning
show_legal_warning() {
    clear
    echo -e "${BOLD}${RED}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BOLD}${RED}║              ⚠️  LEGAL WARNING AND DISCLAIMER ⚠️              ║${NC}"
    echo -e "${BOLD}${RED}╠═══════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${RED}║${NC}                                                               ${RED}║${NC}"
    echo -e "${RED}║${NC}  ${BOLD}MAC address spoofing can be used for legitimate purposes:${NC}  ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Privacy protection on public networks                   ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Authorized penetration testing and security research    ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Development and testing environments                    ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Network troubleshooting and diagnostics                 ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                               ${RED}║${NC}"
    echo -e "${RED}║${NC}  ${BOLD}${YELLOW}However, improper use may:${NC}                                ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Violate network policies or terms of service            ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Be illegal in certain jurisdictions                     ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Cause network connectivity issues                       ${RED}║${NC}"
    echo -e "${RED}║${NC}    • Result in account suspension or legal action            ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                               ${RED}║${NC}"
    echo -e "${RED}║${NC}  ${BOLD}By continuing, you acknowledge that:${NC}                     ${RED}║${NC}"
    echo -e "${RED}║${NC}    ✓ You will use this feature only for legitimate purposes  ${RED}║${NC}"
    echo -e "${RED}║${NC}    ✓ You have authorization to modify network settings       ${RED}║${NC}"
    echo -e "${RED}║${NC}    ✓ You understand the legal and technical risks            ${RED}║${NC}"
    echo -e "${RED}║${NC}    ✓ You accept full responsibility for your actions         ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                               ${RED}║${NC}"
    echo -e "${BOLD}${RED}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo
    
    read -p "$(echo -e "${BOLD}Do you accept these terms and conditions? [yes/NO]:${NC} ")" response
    
    if [[ ! "$response" =~ ^[Yy][Ee][Ss]$ ]]; then
        echo -e "${YELLOW}Setup cancelled. No changes have been made.${NC}"
        exit 0
    fi
    
    log_warn "User accepted MAC spoofing legal disclaimer"
}

# Get list of network interfaces
get_interfaces() {
    ip -o link show | awk -F': ' '{print $2}' | grep -v "^lo$"
}

# Get current MAC address
get_current_mac() {
    local interface="$1"
    ip link show "$interface" 2>/dev/null | grep link/ether | awk '{print $2}' || echo "unknown"
}

# Backup original MAC addresses
backup_original_macs() {
    echo -e "${CYAN}Backing up original MAC addresses...${NC}"
    
    mkdir -p "$(dirname "$NIC_BACKUP")"
    chmod 700 "$(dirname "$NIC_BACKUP")"
    
    echo "# Original MAC addresses - $(date)" > "$NIC_BACKUP"
    echo "# DO NOT EDIT - Generated by MAC spoofing wizard" >> "$NIC_BACKUP"
    echo >> "$NIC_BACKUP"
    
    for iface in $(get_interfaces); do
        local mac=$(get_current_mac "$iface")
        echo "$iface=$mac" >> "$NIC_BACKUP"
    done
    
    echo -e "${GREEN}✓ Original MAC addresses backed up to $NIC_BACKUP${NC}"
    log_info "Original MAC addresses backed up"
}

# Select spoofing mode
select_mode() {
    clear
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}${BLUE}              MAC Spoofing Mode Selection${NC}"
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo
    echo -e "${BOLD}Select MAC spoofing mode:${NC}"
    echo
    echo -e "  ${GREEN}1)${NC} ${BOLD}Manual${NC} - Specify exact MAC addresses"
    echo -e "     └─ Use when you need specific MAC addresses"
    echo
    echo -e "  ${GREEN}2)${NC} ${BOLD}Random${NC} - Generate fully random MAC addresses"
    echo -e "     └─ Maximum privacy, changes on each boot"
    echo
    echo -e "  ${GREEN}3)${NC} ${BOLD}Vendor-Preserve${NC} - Keep vendor prefix, randomize device part"
    echo -e "     └─ Appears as legitimate hardware while maintaining privacy"
    echo
    echo -e "  ${GREEN}4)${NC} ${BOLD}Disabled${NC} - Turn off MAC spoofing"
    echo -e "     └─ Restore original MAC addresses"
    echo
    
    local choice
    read -p "$(echo -e "${CYAN}Enter your choice [1-4]:${NC} ")" choice
    
    case "$choice" in
        1) echo "manual" ;;
        2) echo "random" ;;
        3) echo "vendor-preserve" ;;
        4) echo "disabled" ;;
        *) 
            echo -e "${RED}Invalid choice. Defaulting to disabled.${NC}"
            echo "disabled"
            ;;
    esac
}

# Select interfaces
select_interfaces() {
    local -a selected=()
    
    clear
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}${BLUE}              Network Interface Selection${NC}"
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo
    echo -e "${BOLD}Available network interfaces:${NC}"
    echo
    
    local -a interfaces=($(get_interfaces))
    local i=1
    
    for iface in "${interfaces[@]}"; do
        local mac=$(get_current_mac "$iface")
        echo -e "  ${GREEN}$i)${NC} ${BOLD}$iface${NC} - Current MAC: $mac"
        ((i++))
    done
    
    echo
    read -p "$(echo -e "${CYAN}Enter interface numbers (space-separated, or 'all'):${NC} ")" selection
    
    if [[ "$selection" == "all" ]]; then
        selected=("${interfaces[@]}")
    else
        for num in $selection; do
            if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 1 ] && [ "$num" -le "${#interfaces[@]}" ]; then
                selected+=("${interfaces[$((num-1))]}")
            fi
        done
    fi
    
    printf '%s\n' "${selected[@]}"
}

# Configure manual MAC addresses
configure_manual() {
    local interface="$1"
    
    echo
    echo -e "${CYAN}Configuring manual MAC for${NC} ${BOLD}$interface${NC}"
    echo -e "${YELLOW}Format: XX:XX:XX:XX:XX:XX (hex notation)${NC}"
    echo -e "${YELLOW}Tip: First byte should be even for unicast (e.g., 02:XX:XX:XX:XX:XX)${NC}"
    echo
    
    local mac
    while true; do
        read -p "$(echo -e "${CYAN}Enter MAC address:${NC} ")" mac
        
        # Validate MAC format
        if [[ "$mac" =~ ^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$ ]]; then
            echo "$mac"
            return 0
        else
            echo -e "${RED}Invalid MAC address format. Try again.${NC}"
        fi
    done
}

# Configure vendor prefix
configure_vendor_prefix() {
    local interface="$1"
    local current_mac=$(get_current_mac "$interface")
    local current_prefix=$(echo "$current_mac" | cut -d: -f1-3)
    
    echo
    echo -e "${CYAN}Configuring vendor-preserve mode for${NC} ${BOLD}$interface${NC}"
    echo -e "${YELLOW}Current MAC: $current_mac${NC}"
    echo -e "${YELLOW}Current vendor prefix: $current_prefix${NC}"
    echo
    echo -e "  ${GREEN}1)${NC} Use current vendor prefix (${current_prefix})"
    echo -e "  ${GREEN}2)${NC} Enter custom vendor prefix"
    echo
    
    local choice
    read -p "$(echo -e "${CYAN}Enter your choice [1-2]:${NC} ")" choice
    
    case "$choice" in
        1)
            echo "$current_prefix"
            ;;
        2)
            echo
            read -p "$(echo -e "${CYAN}Enter vendor prefix (XX:XX:XX):${NC} ")" prefix
            if [[ "$prefix" =~ ^([0-9A-Fa-f]{2}:){2}[0-9A-Fa-f]{2}$ ]]; then
                echo "$prefix"
            else
                echo -e "${RED}Invalid format, using current prefix${NC}"
                echo "$current_prefix"
            fi
            ;;
        *)
            echo "$current_prefix"
            ;;
    esac
}

# Generate NixOS configuration
generate_nix_config() {
    local mode="$1"
    shift
    local -a interfaces=("$@")
    
    cat > /tmp/mac-spoof-config.nix <<EOF
# MAC Address Spoofing Configuration
# Generated by MAC spoofing wizard on $(date)
# ⚠️  Use only for legitimate purposes

{ config, lib, pkgs, ... }:

{
  # Import the MAC spoofing module
  imports = [ ./modules/network-settings/mac-spoofing.nix ];
  
  # Enable and configure MAC spoofing
  hypervisor.network.macSpoof = {
    enable = true;
    mode = "$mode";
    logChanges = true;
    persistMACs = $([ "$mode" = "random" ] && echo "true" || echo "false");
    
    interfaces = {
EOF
    
    for iface in "${interfaces[@]}"; do
        echo "      \"$iface\" = {" >> /tmp/mac-spoof-config.nix
        echo "        enable = true;" >> /tmp/mac-spoof-config.nix
        
        case "$mode" in
            manual)
                local mac=$(configure_manual "$iface")
                echo "        macAddress = \"$mac\";" >> /tmp/mac-spoof-config.nix
                ;;
            vendor-preserve)
                local prefix=$(configure_vendor_prefix "$iface")
                echo "        vendorPrefix = \"$prefix\";" >> /tmp/mac-spoof-config.nix
                ;;
            random)
                echo "        randomizeOnBoot = true;" >> /tmp/mac-spoof-config.nix
                ;;
        esac
        
        echo "      };" >> /tmp/mac-spoof-config.nix
    done
    
    cat >> /tmp/mac-spoof-config.nix <<EOF
    };
  };
}
EOF
    
    echo -e "${GREEN}✓ Configuration generated${NC}"
}

# Install configuration
install_config() {
    local target="/etc/nixos/mac-spoof.nix"
    
    echo
    echo -e "${CYAN}Installing configuration...${NC}"
    
    # Backup existing config if present
    if [ -f "$target" ]; then
        cp "$target" "${target}.backup-$(date +%Y%m%d-%H%M%S)"
        echo -e "${YELLOW}Existing configuration backed up${NC}"
    fi
    
    # Copy new configuration
    cp /tmp/mac-spoof-config.nix "$target"
    chmod 644 "$target"
    
    echo -e "${GREEN}✓ Configuration installed to $target${NC}"
    
    # Add to configuration.nix if not already present
    if ! grep -q "mac-spoof.nix" /etc/nixos/configuration.nix 2>/dev/null; then
        echo
        echo -e "${YELLOW}Note: Add the following to your configuration.nix imports:${NC}"
        echo -e "${CYAN}  imports = [${NC}"
        echo -e "${CYAN}    ./mac-spoof.nix${NC}"
        echo -e "${CYAN}  ];${NC}"
        echo
        read -p "$(echo -e "${CYAN}Add automatically? [Y/n]:${NC} ")" auto_add
        if [[ ! "$auto_add" =~ ^[Nn]$ ]]; then
            # Backup configuration.nix
            cp /etc/nixos/configuration.nix /etc/nixos/configuration.nix.backup-$(date +%Y%m%d-%H%M%S)
            
            # Add import (simple append to imports list)
            sed -i '/imports = \[/a\    ./mac-spoof.nix' /etc/nixos/configuration.nix
            echo -e "${GREEN}✓ Added to configuration.nix${NC}"
        fi
    fi
}

# Apply configuration
apply_config() {
    echo
    echo -e "${CYAN}Applying configuration...${NC}"
    echo -e "${YELLOW}This will rebuild your NixOS configuration.${NC}"
    echo
    
    read -p "$(echo -e "${CYAN}Apply now? [Y/n]:${NC} ")" apply
    
    if [[ ! "$apply" =~ ^[Nn]$ ]]; then
        echo
        echo -e "${BLUE}Running nixos-rebuild...${NC}"
        if nixos-rebuild switch; then
            echo -e "${GREEN}✓ Configuration applied successfully${NC}"
            log_info "MAC spoofing configuration applied"
        else
            echo -e "${RED}✗ Failed to apply configuration${NC}"
            echo -e "${YELLOW}You can apply manually later with: nixos-rebuild switch${NC}"
            log_error "Failed to apply MAC spoofing configuration"
        fi
    else
        echo -e "${YELLOW}Configuration saved but not applied.${NC}"
        echo -e "${CYAN}To apply later, run: nixos-rebuild switch${NC}"
    fi
}

# Show summary
show_summary() {
    local mode="$1"
    shift
    local -a interfaces=("$@")
    
    clear
    echo -e "${BOLD}${GREEN}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BOLD}${GREEN}║              MAC Spoofing Configuration Summary              ║${NC}"
    echo -e "${BOLD}${GREEN}╠═══════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${GREEN}║${NC}                                                               ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}  ${BOLD}Mode:${NC} $mode                                              ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}  ${BOLD}Interfaces:${NC}                                              ${GREEN}║${NC}"
    
    for iface in "${interfaces[@]}"; do
        echo -e "${GREEN}║${NC}    • $iface                                                ${GREEN}║${NC}"
    done
    
    echo -e "${GREEN}║${NC}                                                               ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}  ${BOLD}Configuration files:${NC}                                     ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}    • /etc/nixos/mac-spoof.nix                                ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}    • $NIC_BACKUP (backup)                  ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}                                                               ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}  ${BOLD}Useful commands:${NC}                                         ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}    • View logs: journalctl -t mac-spoof                      ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}    • Restart service: systemctl restart mac-spoof            ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}    • Check status: systemctl status mac-spoof                ${GREEN}║${NC}"
    echo -e "${GREEN}║${NC}                                                               ${GREEN}║${NC}"
    echo -e "${BOLD}${GREEN}╚═══════════════════════════════════════════════════════════════╝${NC}"
}

# Main wizard flow
main() {
    clear
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}${BLUE}        Hyper-NixOS MAC Address Spoofing Setup Wizard${NC}"
    echo -e "${BOLD}${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo
    
    # Check root
    check_root
    
    # Show legal warning
    show_legal_warning
    
    # Backup original MACs
    backup_original_macs
    
    # Select mode
    local mode
    mode=$(select_mode)
    
    if [ "$mode" = "disabled" ]; then
        echo -e "${YELLOW}MAC spoofing will be disabled.${NC}"
        # TODO: Remove configuration
        exit 0
    fi
    
    # Select interfaces
    local -a interfaces
    mapfile -t interfaces < <(select_interfaces)
    
    if [ ${#interfaces[@]} -eq 0 ]; then
        echo -e "${RED}No interfaces selected. Exiting.${NC}"
        exit 1
    fi
    
    # Generate configuration
    generate_nix_config "$mode" "${interfaces[@]}"
    
    # Install configuration
    install_config
    
    # Apply configuration
    apply_config
    
    # Show summary
    show_summary "$mode" "${interfaces[@]}"
    
    echo
    echo -e "${BOLD}${GREEN}Setup completed successfully!${NC}"
    log_info "MAC spoofing wizard completed successfully"
}

# Run main
main "$@"
