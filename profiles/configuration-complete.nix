# Hyper-NixOS Complete Configuration
# This configuration includes all features with modular selection and security awareness

{ config, lib, pkgs, ... }:

{
  imports = [
    # Hardware
    ../hardware-configuration.nix
    
    # Core modules
    ../modules/core/options.nix
    ../modules/core/hypervisor-base.nix
    ../modules/core/system.nix
    ../modules/core/packages.nix
    ../modules/core/directories.nix
    ../modules/core/portable-base.nix
    ../modules/core/optimized-system.nix
    ../modules/core/keymap-sanitizer.nix
    
    # Feature system
    ../modules/system-tiers.nix  # System tier definitions (required by feature-manager)
    ../modules/features/feature-categories.nix
    ../modules/features/feature-manager.nix
    ../modules/features/adaptive-docs.nix
    ../modules/features/educational-content.nix
    
    # Security modules
    ../modules/security/base.nix
    ../modules/security/profiles.nix
    ../modules/security/privilege-separation.nix
    ../modules/security/polkit-rules.nix
    
    # Virtualization
    ../modules/virtualization/libvirt.nix
    ../modules/virtualization/performance.nix
    
    # Note: Networking and service configurations are handled directly in this file
    
    # Import user's feature selection (generated by setup wizard)
    ./hypervisor-features.nix
  ];

  # System identification
  networking.hostName = "hyper-nixos";
  
  # Base system configuration
  system.stateVersion = "24.05";
  
  # Boot configuration
  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
    
    # Kernel parameters for virtualization
    kernelParams = [ 
      "intel_iommu=on" 
      "iommu=pt" 
      "kvm_intel.nested=1"
    ];
    
    # Required kernel modules
    kernelModules = [ "kvm-intel" "vfio" "vfio_pci" ];
  };
  
  # Enable core features
  hypervisor = {
    enable = true;
    
    # Feature management system
    featureManager.enable = true;
    
    # Educational content
    education = {
      enable = true;
      enableInteractiveTutorials = true;
      enableProgressTracking = true;
    };
    
    # Adaptive documentation
    documentation = {
      enable = true;
      contextAware = true;
      enableHints = true;
    };
    
    # Security modules
    security = {
      # Privilege separation
      privileges.enable = true;
      
      # Polkit rules for passwordless VM ops
      polkit.enable = true;
    };
  };
  
  # Core packages
  environment.systemPackages = with pkgs; [
    # Virtualization tools
    virt-manager
    virt-viewer
    libguestfs
    
    # System tools
    htop
    iotop
    tmux
    git
    
    # Monitoring
    prometheus
    grafana
    
    # Educational tools
    dialog
    whiptail
    
    # Our custom scripts
    (pkgs.writeScriptBin "hv" ''
      #!${pkgs.bash}/bin/bash
      # Main Hyper-NixOS CLI
      
      case "''${1:-help}" in
        help)
          echo "Hyper-NixOS Management Tool"
          echo
          echo "Usage: hv <command> [options]"
          echo
          echo "Commands:"
          echo "  setup       - Run setup wizard"
          echo "  vm          - VM management"
          echo "  network     - Network management"
          echo "  storage     - Storage management"
          echo "  security    - Security tools"
          echo "  help        - Show help"
          echo "  tutorial    - Interactive tutorials"
          echo "  docs        - Documentation"
          ;;
        setup)
          exec ${./scripts/setup-wizard.sh}
          ;;
        security)
          exec ${./scripts/security-visualizer.sh}
          ;;
        *)
          echo "Unknown command: $1"
          echo "Run 'hv help' for usage"
          exit 1
          ;;
      esac
    '')
  ];
  
  # System services
  services = {
    # Enable libvirtd
    libvirtd = {
      enable = true;
      qemu = {
        package = pkgs.qemu_kvm;
        runAsRoot = false;
        swtpm.enable = true;
        ovmf = {
          enable = true;
          packages = [ pkgs.OVMFFull.fd ];
        };
      };
    };
    
    # Monitoring (if enabled via features)
    prometheus = lib.mkIf (lib.elem "prometheus" config.hypervisor.featureManager.enabledFeatures) {
      enable = true;
      port = 9090;
      exporters = {
        node = {
          enable = true;
          enabledCollectors = [ "systemd" "processes" ];
        };
        # VM exporter
        libvirt = {
          enable = true;
        };
      };
    };
    
    # Web dashboard (if enabled)
    nginx = lib.mkIf (lib.elem "webDashboard" config.hypervisor.featureManager.enabledFeatures) {
      enable = true;
      virtualHosts."dashboard.local" = {
        forceSSL = true;
        sslCertificate = "/etc/hypervisor/certs/dashboard.crt";
        sslCertificateKey = "/etc/hypervisor/certs/dashboard.key";
        locations."/" = {
          proxyPass = "http://localhost:8080";
        };
      };
    };
  };
  
  # Network configuration
  networking = {
    firewall = {
      enable = true;
      
      # Allow VM traffic
      interfaces."virbr0" = {
        allowedTCPPorts = [ 22 80 443 ];
      };
      
      # Dashboard (if enabled)
      allowedTCPPorts = lib.optionals 
        (lib.elem "webDashboard" config.hypervisor.featureManager.enabledFeatures)
        [ 8443 ];
    };
    
    # Network bridges
    bridges = {
      br0 = {
        interfaces = [ ];  # Add physical interfaces as needed
      };
    };
  };
  
  # User configuration (populated by setup wizard)
  users.users = {
    # Default admin user
    admin = {
      isNormalUser = true;
      description = "System Administrator";
      extraGroups = [ "wheel" ];
      # Password should be set via hashedPassword
    };
  };
  
  # System activation scripts
  system.activationScripts = {
    # Create required directories
    hypervisorDirs = ''
      mkdir -p /etc/hypervisor/{features,reports,docs,certs}
      mkdir -p /var/lib/hypervisor/{vms,backups,logs}
      chmod 750 /etc/hypervisor
      chmod 755 /var/lib/hypervisor
    '';
    
    # Initial setup check
    setupCheck = ''
      if [ ! -f /etc/hypervisor/.setup-complete ]; then
        echo "══════════════════════════════════════════════════════"
        echo "  Welcome to Hyper-NixOS!"
        echo "══════════════════════════════════════════════════════"
        echo
        echo "  Run 'hv setup' to configure your system"
        echo
        echo "══════════════════════════════════════════════════════"
      fi
    '';
  };
  
  # Message of the day
  environment.etc."motd".text = ''
    ╔═══════════════════════════════════════════════════════════════╗
    ║                    Welcome to Hyper-NixOS                     ║
    ╠═══════════════════════════════════════════════════════════════╣
    ║                                                               ║
    ║  Quick Commands:                                              ║
    ║  • hv setup      - Configure system features                  ║
    ║  • hv vm         - Manage virtual machines                    ║
    ║  • hv security   - View security status                       ║
    ║  • hv tutorial   - Interactive tutorials                      ║
    ║  • hv help       - Get help on any topic                     ║
    ║                                                               ║
    ║  Your Configuration:                                          ║
    ║  • Profile: ${config.hypervisor.featureManager.profile}      ║
    ║  • Risk Level: ${config.hypervisor.featureManager.riskTolerance} ║
    ║  • Docs Level: ${config.hypervisor.documentation.profile}    ║
    ║                                                               ║
    ╚═══════════════════════════════════════════════════════════════╝
  '';
}