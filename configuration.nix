# Hyper-NixOS Master Configuration
# Version: 1.0.0
# 
# Copyright (c) 2024-2025 MasterofNull
# Licensed under the MIT License - see LICENSE file
#
# This configuration uses:
# - NixOS module system (MIT License, NixOS contributors)
# - SystemD for service management (LGPL-2.1+)
# - QEMU/KVM via Libvirt for virtualization (GPL-2.0, LGPL-2.1+)
# - Prometheus/Grafana for monitoring (Apache 2.0, AGPL-3.0)
#
# For complete license information, see:
# - LICENSE - Hyper-NixOS license
# - THIRD_PARTY_LICENSES.md - All dependencies
# - CREDITS.md - Attributions
# 
# This is the complete configuration including all features and modules.
# Customize by editing the options below or using the setup wizard.
# 
# For help: Run 'hv help' or see /etc/hypervisor/docs/

{ config, lib, pkgs, ... }:

{
  imports = [
    # Hardware configuration (generated by nixos-generate-config)
    ./hardware-configuration.nix

    # Core system modules
    ./modules/core/options.nix
    ./modules/core/hypervisor-base.nix
    ./modules/core/system.nix
    ./modules/core/packages.nix
    ./modules/core/directories.nix
    ./modules/core/keymap-sanitizer.nix
    ./modules/core/portable-base.nix
    ./modules/core/optimized-system.nix
    ./modules/core/first-boot-service.nix
    ./modules/core/arm-detection.nix
    ./modules/core/universal-hardware-detection.nix  # Universal hardware detection (ALL architectures)

    # Hardware platform optimizations
    ./modules/hardware/platform-detection.nix  # Auto-detection of platform type
    ./modules/hardware/laptop.nix
    ./modules/hardware/desktop.nix
    ./modules/hardware/server.nix

    # System management
    ./modules/system/nixos-update-checker.nix  # Monthly update notifications
    ./modules/system/hibernation-auth.nix  # Intelligent hibernation/resume authentication

    # Feature management system
    ./modules/system-tiers.nix  # System tier definitions (required by feature-manager)
    ./modules/features/feature-categories.nix
    ./modules/features/feature-manager.nix
    ./modules/features/adaptive-docs.nix
    ./modules/features/educational-content.nix
    
    # Security modules
    ./modules/security/base.nix
    ./modules/security/profiles.nix
    ./modules/security/privilege-separation.nix
    ./modules/security/password-protection.nix  # CRITICAL: Prevents password wipes
    ./modules/security/polkit-rules.nix
    ./modules/security/threat-detection.nix
    ./modules/security/threat-response.nix
    ./modules/security/threat-intelligence.nix
    ./modules/security/behavioral-analysis.nix
    
    # Virtualization modules
    ./modules/virtualization/libvirt.nix
    ./modules/virtualization/performance.nix

    # VM Management modules
    ./modules/vm-management/resource-quotas.nix  # Per-VM resource limits (CPU, RAM, disk, network)
    ./modules/vm-management/creation-limits.nix  # VM creation limits (count, rate, storage)

    # GUI modules (conditionally enabled via hypervisor.gui.enableAtBoot)
    ./modules/gui/desktop.nix
    ./modules/gui/input.nix
    ./modules/gui/remote-desktop.nix
    ./modules/gui/admin-integration.nix
    
    # Note: Networking and service configurations are handled directly in this file
    
    # User feature selections (generated by setup wizard)
    # Uncomment after running: hv setup
    # ./hypervisor-features.nix
  ];

  # System identification
  networking.hostName = "hyper-nixos";
  system.stateVersion = "25.05";  # Don't change this after installation

  # Nix configuration
  nix.settings = {
    experimental-features = [ "nix-command" "flakes" ];
    # Trusted users can use flake nixConfig without warnings
    trusted-users = [ "root" "@wheel" ];
  };

  # Boot configuration
  boot = {
    loader = {
      systemd-boot.enable = lib.mkDefault true;
      efi.canTouchEfiVariables = lib.mkDefault true;
      timeout = lib.mkDefault 3;
    };

    # NOTE: All hardware-specific kernel parameters and modules are automatically
    # configured by modules/core/universal-hardware-detection.nix
    #
    # This provides INTELLIGENT DISCOVERY for:
    # - CPU architecture (x86_64, ARM, RISC-V, PowerPC, MIPS, etc.)
    # - CPU vendor (Intel, AMD, Qualcomm, Broadcom, etc.)
    # - Virtualization capabilities (VT-x, AMD-V, ARM-virt, etc.)
    # - IOMMU settings (intel_iommu, amd_iommu, ARM SMMU, etc.)
    # - KVM modules (kvm-intel, kvm-amd, kvm-arm, kvm-hv, etc.)
    # - VFIO modules (architecture-specific)
    #
    # NO HARDCODED SETTINGS - works on any supported platform!
    #
    # To see what was detected: hv-hardware-info
  };
  
  # Hypervisor configuration
  hypervisor = {
    # Core features (always enabled)
    enable = true;
    
    # Feature management
    featureManager = {
      enable = true;
      profile = "balanced";  # Options: minimal, balanced, full, custom
      riskTolerance = "balanced";  # Options: paranoid, cautious, balanced, accepting
      generateReport = true;
      
      # For custom profile, specify features:
      # enabledFeatures = [ "webDashboard" "monitoring" "backup" ];
    };
    
    # Documentation and education
    documentation = {
      enable = true;
      profile = "intermediate";  # Options: beginner, intermediate, expert
      verbosity = "medium";  # Options: minimal, low, medium, high
      enableHints = true;
      enableTutorials = true;
      contextAware = true;
    };
    
    education = {
      enable = true;
      defaultLevel = "intermediate";
      enableInteractiveTutorials = true;
      enableProgressTracking = true;
    };
    
    # Security configuration
    security = {
      # Password protection (prevents password wipes on rebuild)
      passwordProtection = {
        enable = true;
        warnOnMissingPasswords = true;
        requirePasswordsOnRebuild = false;  # Set to true for strict enforcement
      };
      
      # Privilege separation
      privileges = {
        enable = true;
        allowPasswordlessVMOperations = true;
        
        # Define users by role (customize these)
        vmUsers = [ ];  # Basic VM operations
        vmOperators = [ ];  # Advanced VM operations
        systemAdmins = [ ];  # System administration
      };
      
      # Polkit rules
      polkit = {
        enable = true;
        enableVMRules = true;
        enableOperatorRules = true;
      };
      
      # Threat detection
      threatDetection = {
        enable = true;
        detectionMode = "active";  # Options: passive, active, aggressive
        enableMachineLearning = true;
        enableBehavioralAnalysis = true;
        enableThreatIntelligence = true;
        enableAutomatedResponse = false;  # Set to true for automatic responses
        
        sensors = {
          network = true;
          system = true;
          files = true;
          memory = true;
          virtualization = true;
        };
        
        alerting = {
          channels = [ "syslog" ];  # Add: email, slack, webhook
          thresholds = {
            info = 100;
            medium = 20;
            high = 5;
          };
        };
      };
      
      # Threat response
      threatResponse = {
        enable = true;
        mode = "interactive";  # Options: monitor, interactive, automatic
        enabledPlaybooks = [
          "networkIsolation"
          "authProtection"
          "resourceProtection"
        ];
        forensics.enable = true;
      };
      
      # Behavioral analysis
      behavioralAnalysis = {
        enable = true;
        modelUpdateInterval = "daily";
        zeroDayDetection = {
          enable = true;
          confidenceThreshold = 70;
        };
      };
      
      # Threat intelligence
      threatIntelligence = {
        enable = true;
        enabledFeeds = [
          "emergingThreats"
          "malwareDomains"
          "malwareBazaar"
        ];
        updateInterval = "6h";
        enableCorrelation = true;
      };
    };

    # VM Creation and Resource Limits
    vmLimits = {
      enable = true;

      global = {
        maxTotalVMs = 100;        # Maximum total VMs on system
        maxRunningVMs = 50;       # Maximum concurrent running VMs
        maxVMsPerHour = 10;       # Rate limit: VMs created per hour
      };

      perUser = {
        enable = true;
        maxVMsPerUser = 20;       # Max VMs per regular user
        maxRunningVMsPerUser = 10; # Max running VMs per user
        # userExceptions = { alice = 50; bob = 30; };  # Custom limits per user
      };

      storage = {
        maxDiskPerVM = 500;       # GB - Maximum disk size per VM
        maxTotalStorage = 5000;   # GB - Total storage for all VMs
        maxSnapshotsPerVM = 10;   # Maximum snapshots per VM
      };

      enforcement = {
        blockExcessCreation = true;  # Block creation when limits exceeded
        notifyOnApproach = true;     # Notify at 90% of limits
        adminOverride = true;        # Allow admins to override with --force
      };
    };

    # Default VM configuration
    defaults = {
      vcpus = 2;
      memory = 2048;  # MB
      diskSize = "20G";
      networkBridge = "virbr0";
    };
  };
  
  # Virtualization settings
  virtualisation = {
    libvirtd = {
      enable = true;
      qemu = {
        package = pkgs.qemu_kvm;
        runAsRoot = false;
        swtpm.enable = true;
        ovmf = {
          enable = true;
          packages = [ pkgs.OVMFFull.fd ];
        };
      };
      
      # Allow regular users to manage VMs
      extraConfig = ''
        unix_sock_group = "libvirtd"
        unix_sock_ro_perms = "0777"
        unix_sock_rw_perms = "0770"
        auth_unix_ro = "none"
        auth_unix_rw = "none"
      '';
    };
    
    # Container support (optional)
    podman = {
      enable = false;  # Enable if needed
      dockerCompat = true;
    };
  };
  
  # Network configuration
  networking = {
    # Enable firewall
    firewall = {
      enable = true;
      trustedInterfaces = [ "virbr0" ];
      
      # Allow VM traffic
      allowedTCPPorts = [ ];  # Add ports as needed
      allowedUDPPorts = [ ];
    };
    
    # Network bridges for VMs
    bridges = {
      "virbr0" = {
        interfaces = [ ];  # Leave empty for NAT
      };
      # Add more bridges as needed:
      # "br0" = {
      #   interfaces = [ "eno1" ];  # Bridge to physical interface
      # };
    };
    
    # Enable NAT for default bridge
    nat = {
      enable = true;
      internalInterfaces = [ "virbr0" ];
      externalInterface = null;  # Auto-detect
    };
  };
  
  # System packages
  environment.systemPackages = with pkgs; [
    # Virtualization tools
    virt-manager
    virt-viewer
    libguestfs-with-appliance
    
    # System tools
    vim
    git
    tmux
    htop
    iotop
    ncdu
    tree
    
    # Network tools
    bridge-utils
    tcpdump
    nmap
    
    # Security tools
    aide
    rkhunter
    
    # Monitoring tools
    prometheus
    grafana
    loki
    
    # Our custom tools
    (import ./packages/hypervisor-cli.nix { inherit pkgs; })
  ];
  
  # System services
  services = {
    # SSH access
    openssh = {
      enable = true;
      settings = {
        PasswordAuthentication = false;
        PermitRootLogin = "no";
        X11Forwarding = false;
      };
    };
    
    # Time synchronization
    chrony.enable = true;
    
    # System monitoring (if monitoring feature enabled)
    prometheus = lib.mkIf (lib.elem "monitoring" config.hypervisor.featureManager.enabledFeatures) {
      enable = true;
      port = 9090;
      
      exporters = {
        node = {
          enable = true;
          enabledCollectors = [ "systemd" "processes" "filesystem" "netdev" ];
        };
      };
      
      scrapeConfigs = [
        {
          job_name = "node";
          static_configs = [{
            targets = [ "localhost:9100" ];
          }];
        }
      ];
    };
    
    # Grafana (if monitoring feature enabled)
    grafana = lib.mkIf (lib.elem "monitoring" config.hypervisor.featureManager.enabledFeatures) {
      enable = true;
      settings = {
        server = {
          http_port = 3000;
          http_addr = "127.0.0.1";
        };
      };
    };
  };
  
  # User configuration
  users = {
    # CRITICAL: Password Protection Setting
    # ==================================================
    # DO NOT CHANGE THIS TO FALSE without setting hashedPassword for ALL users!
    # 
    # mutableUsers = true means:
    #   ✓ You can use 'passwd' to set/change passwords
    #   ✓ Passwords persist across 'nixos-rebuild switch'
    #   ✓ User passwords are stored in /etc/shadow (mutable)
    #   ✗ Password changes not tracked in git
    #
    # mutableUsers = false means:
    #   ✓ Passwords are declarative (in configuration)
    #   ✗ WILL WIPE ALL PASSWORDS unless hashedPassword is set for each user!
    #   ✗ Cannot use 'passwd' command
    #
    # RECOMMENDED: Keep this as true unless you understand the implications
    mutableUsers = true;
    
    # Define your users here
    users = {
      # Example admin user (customize or remove)
      # WARNING: This user definition will be created on first boot
      # You MUST set the password after first boot with: sudo passwd admin
      admin = lib.mkDefault {
        isNormalUser = true;
        description = "System Administrator";
        extraGroups = [ "wheel" "libvirtd" "kvm" ];
        
        # For mutableUsers = true (CURRENT SETTING):
        #   Run after first boot: sudo passwd admin
        #   Your password will persist across rebuilds
        
        # For mutableUsers = false (if you change it):
        #   1. Generate password hash: mkpasswd -m sha-512
        #   2. Set: hashedPassword = "$6$rounds=100000$YOUR_HASH_HERE";
        #   3. REMOVE this comment block to avoid accidental lockout
        
        # SSH key authentication (optional but HIGHLY recommended)
        openssh.authorizedKeys.keys = [
          # Add your SSH public key here to avoid password dependency
          # Example: "ssh-rsa AAAAB3NzaC1yc2E... user@hostname"
        ];
      };
    };
  };
  
  # System activation scripts
  system.activationScripts = {
    hypervisorSetup = ''
      # Create required directories
      mkdir -p /etc/hypervisor/{features,reports,docs,certs}
      mkdir -p /var/lib/hypervisor/{vms,backups,logs,threats,ml-models}

      # Set permissions
      chmod 750 /etc/hypervisor
      chmod 755 /var/lib/hypervisor

      # Add hv CLI to system PATH
      mkdir -p /usr/local/bin
      if [ -f /etc/nixos/scripts/hv ]; then
        ln -sf /etc/nixos/scripts/hv /usr/local/bin/hv
        chmod +x /etc/nixos/scripts/hv
      fi
      
      # First-run check
      if [ ! -f /etc/hypervisor/.setup-complete ]; then
        cat <<EOF > /etc/motd.first-run
╔═══════════════════════════════════════════════════════════════╗
║              Welcome to Hyper-NixOS!                          ║
╠═══════════════════════════════════════════════════════════════╣
║                                                               ║
║  This appears to be your first run. Please:                  ║
║                                                               ║
║  1. Run the setup wizard:                                     ║
║     $ hv setup                                                ║
║                                                               ║
║  2. Configure users in /etc/nixos/configuration.nix          ║
║                                                               ║
║  3. Rebuild the system:                                       ║
║     $ sudo nixos-rebuild switch                               ║
║                                                               ║
║  For help: hv help                                            ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
EOF
      fi
    '';
  };
  
  # Message of the day
  environment.etc."motd".text = lib.mkDefault ''

    ╦ ╦┬ ┬┌─┐┌─┐┬─┐   ╔╗╔┬─┐ ┬╔═╗╔═╗
    ╠═╣└┬┘├─┘├┤ ├┬┘───║║║│┌┴┬┘║ ║╚═╗
    ╩ ╩ ┴ ┴  └─┘┴└─   ╝╚╝┴┴ └─╚═╝╚═╝

    Next-Generation Virtualization Platform
    v1.0.0 | © 2024-2025 MasterofNull

    Quick Commands:
    • hv help         - Show all commands
    • hv vm-create    - Create VM with intelligent defaults
    • hv discover     - View system capabilities
    • hv security     - Security configuration

    Documentation: /etc/hypervisor/docs/
    Repository: https://github.com/MasterofNull/Hyper-NixOS

    Licensed under MIT License
  '';
  
  # Performance tuning
  powerManagement.cpuFreqGovernor = "performance";
  
  # Security hardening
  security = {
    # Enable audit framework
    audit.enable = true;
    auditd.enable = true;
    
    # AppArmor
    apparmor = {
      enable = true;
      killUnconfinedConfinables = false;
    };
    
    # Kernel hardening
    kernel.sysctl = {
      # Network hardening
      "net.ipv4.conf.all.log_martians" = 1;
      "net.ipv4.conf.default.log_martians" = 1;
      "net.ipv4.icmp_echo_ignore_broadcasts" = 1;
      "net.ipv4.conf.all.accept_source_route" = 0;
      "net.ipv6.conf.all.accept_source_route" = 0;
      
      # VM performance
      "vm.swappiness" = 10;
      "vm.dirty_ratio" = 10;
      "vm.dirty_background_ratio" = 5;
      
      # File limits
      "fs.file-max" = 2097152;
      "fs.inotify.max_user_watches" = 524288;
    };
  };
}

# Configuration Tips:
# 
# 1. First Run:
#    - Run 'hv setup' to configure features
#    - Add your users to the vmUsers/vmOperators/systemAdmins lists
#    - Set user passwords with hashedPassword
#    - Add SSH keys for remote access
# 
# 2. Hardware-Specific:
#    - For AMD CPUs: Change kvm-intel to kvm-amd
#    - For AMD CPUs: Change kvm_intel.nested to kvm_amd.nested
#    - Adjust hypervisor.defaults based on your hardware
# 
# 3. Network:
#    - Configure additional bridges in networking.bridges
#    - Adjust firewall rules as needed
#    - Set up VLANs if required
# 
# 4. Security:
#    - Review and adjust threat detection settings
#    - Configure alert channels (email, Slack, etc.)
#    - Set up automated responses carefully
# 
# 5. After Changes:
#    - Always run: sudo nixos-rebuild test
#    - If successful: sudo nixos-rebuild switch