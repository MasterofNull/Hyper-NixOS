{ config, lib, pkgs, ... }:

# Vulnerability Scanning Module
# Provides CVE scanning and automated security updates

let
  cfg = config.hypervisor.security.vulnerabilityScanning;
in
{
  options.hypervisor.security.vulnerabilityScanning = {
    enable = lib.mkEnableOption "vulnerability scanning and CVE detection";
    
    scanner = lib.mkOption {
      type = lib.types.enum [ "trivy" "grype" "both" ];
      default = "trivy";
      description = "Vulnerability scanner to use";
    };
    
    scanInterval = lib.mkOption {
      type = lib.types.str;
      default = "daily";
      description = "Scanning interval (systemd timer format)";
    };
    
    scanTargets = {
      system = lib.mkOption {
        type = lib.types.bool;
        default = true;
        description = "Scan system packages";
      };
      
      containers = lib.mkOption {
        type = lib.types.bool;
        default = true;
        description = "Scan container images";
      };
      
      filesystems = lib.mkOption {
        type = lib.types.bool;
        default = false;
        description = "Scan filesystems for vulnerabilities";
      };
    };
    
    autoUpdate = {
      enable = lib.mkOption {
        type = lib.types.bool;
        default = false;
        description = "Enable automatic security updates";
      };
      
      schedule = lib.mkOption {
        type = lib.types.str;
        default = "weekly";
        description = "Update schedule";
      };
    };
    
    alerting = {
      enable = lib.mkOption {
        type = lib.types.bool;
        default = true;
        description = "Enable vulnerability alerts";
      };
      
      minSeverity = lib.mkOption {
        type = lib.types.enum [ "LOW" "MEDIUM" "HIGH" "CRITICAL" ];
        default = "HIGH";
        description = "Minimum severity level for alerts";
      };
    };
    
    database = {
      autoUpdate = lib.mkOption {
        type = lib.types.bool;
        default = true;
        description = "Automatically update vulnerability databases";
      };
      
      updateInterval = lib.mkOption {
        type = lib.types.str;
        default = "6h";
        description = "Database update interval";
      };
    };
  };
  
  config = lib.mkIf cfg.enable {
    # Vulnerability scanning tools
    environment.systemPackages = with pkgs; [
      pkgs.nix-update    # Nix package updater
      pkgs.nvd           # Nix vulnerability database checker
      pkgs.vulnix        # Nix security scanner
    ] ++ lib.optionals (cfg.scanner == "trivy" || cfg.scanner == "both") [
      pkgs.trivy         # Comprehensive vulnerability scanner
    ] ++ lib.optionals (cfg.scanner == "grype" || cfg.scanner == "both") [
      pkgs.grype         # Vulnerability scanner for container images
      pkgs.syft          # SBOM generator
    ];
    
    # Vulnerability scanning service
    systemd.services.vulnerability-scanner = {
      description = "Vulnerability Scanning Service";
      after = [ "network.target" ];
      
      serviceConfig = {
        Type = "oneshot";
        ExecStart = pkgs.writeScript "vulnerability-scan" ''
          #!${pkgs.bash}/bin/bash
          set -e
          
          SCAN_DIR="/var/lib/hypervisor/vulnerability-scans"
          mkdir -p "$SCAN_DIR"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          REPORT="$SCAN_DIR/scan-$TIMESTAMP.json"
          
          echo "Starting vulnerability scan at $(date)"
          
          ${lib.optionalString cfg.scanTargets.system ''
            echo "Scanning system packages..."
            ${pkgs.vulnix}/bin/vulnix --system > "$SCAN_DIR/system-vulnix-$TIMESTAMP.txt" 2>&1 || true
            ${pkgs.nvd}/bin/nvd diff /run/current-system /run/current-system > "$SCAN_DIR/system-nvd-$TIMESTAMP.txt" 2>&1 || true
          ''}
          
          ${lib.optionalString (cfg.scanTargets.containers && (cfg.scanner == "trivy" || cfg.scanner == "both")) ''
            echo "Scanning container images..."
            for image in $(podman images --format "{{.Repository}}:{{.Tag}}" 2>/dev/null || true); do
              echo "  Scanning $image..."
              ${pkgs.trivy}/bin/trivy image --format json --output "$SCAN_DIR/container-$(echo $image | tr '/:' '-')-$TIMESTAMP.json" "$image" || true
            done
          ''}
          
          ${lib.optionalString cfg.scanTargets.filesystems ''
            echo "Scanning filesystems..."
            ${pkgs.trivy}/bin/trivy fs --format json --output "$SCAN_DIR/filesystem-$TIMESTAMP.json" / || true
          ''}
          
          # Generate summary report
          echo "Generating summary report..."
          {
            echo "{"
            echo "  \"timestamp\": \"$TIMESTAMP\","
            echo "  \"scanner\": \"${cfg.scanner}\","
            echo "  \"targets\": {"
            echo "    \"system\": ${if cfg.scanTargets.system then "true" else "false"},"
            echo "    \"containers\": ${if cfg.scanTargets.containers then "true" else "false"},"
            echo "    \"filesystems\": ${if cfg.scanTargets.filesystems then "true" else "false"}"
            echo "  },"
            echo "  \"results_dir\": \"$SCAN_DIR\""
            echo "}"
          } > "$REPORT"
          
          echo "Vulnerability scan complete. Report: $REPORT"
          
          ${lib.optionalString cfg.alerting.enable ''
            # Check for critical vulnerabilities
            CRITICAL_COUNT=$(find "$SCAN_DIR" -name "*-$TIMESTAMP.json" -exec grep -c "CRITICAL" {} + 2>/dev/null | awk '{s+=$1} END {print s}' || echo "0")
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "WARNING: Found $CRITICAL_COUNT critical vulnerabilities!"
              # Alert integration point
              logger -t vulnerability-scanner -p security.crit "Found $CRITICAL_COUNT critical vulnerabilities"
            fi
          ''}
        '';
        
        User = "root";
        Group = "root";
      };
    };
    
    # Scanning timer
    systemd.timers.vulnerability-scanner = {
      description = "Vulnerability Scanning Timer";
      wantedBy = [ "timers.target" ];
      
      timerConfig = {
        OnCalendar = cfg.scanInterval;
        Persistent = true;
        RandomizedDelaySec = "1h";
      };
    };
    
    # Database update service
    systemd.services.vulnerability-db-update = lib.mkIf cfg.database.autoUpdate {
      description = "Vulnerability Database Update";
      after = [ "network.target" ];
      
      serviceConfig = {
        Type = "oneshot";
        ExecStart = pkgs.writeScript "update-vuln-db" ''
          #!${pkgs.bash}/bin/bash
          echo "Updating vulnerability databases..."
          
          ${lib.optionalString (cfg.scanner == "trivy" || cfg.scanner == "both") ''
            echo "Updating Trivy database..."
            ${pkgs.trivy}/bin/trivy image --download-db-only
          ''}
          
          echo "Database update complete"
        '';
        User = "root";
      };
    };
    
    systemd.timers.vulnerability-db-update = lib.mkIf cfg.database.autoUpdate {
      description = "Vulnerability Database Update Timer";
      wantedBy = [ "timers.target" ];
      
      timerConfig = {
        OnBootSec = "5min";
        OnUnitActiveSec = cfg.database.updateInterval;
        Persistent = true;
      };
    };
    
    # Automatic security updates
    system.autoUpgrade = lib.mkIf cfg.autoUpdate.enable {
      enable = true;
      dates = cfg.autoUpdate.schedule;
      allowReboot = false;  # Don't auto-reboot
      flake = null;  # Use channel
    };
    
    # Directory setup
    systemd.tmpfiles.rules = [
      "d /var/lib/hypervisor/vulnerability-scans 0755 root root - -"
      "d /var/cache/trivy 0755 root root - -"
    ];
    
    # Feature status
    environment.etc."hypervisor/features/vulnerability-scanning.conf".text = ''
      # Vulnerability Scanning Configuration
      FEATURE_NAME="vulnerability-scanning"
      FEATURE_STATUS="enabled"
      FEATURE_VERSION="1.0.0"
      
      SCANNER="${cfg.scanner}"
      SCAN_INTERVAL="${cfg.scanInterval}"
      AUTO_UPDATE="${if cfg.autoUpdate.enable then "yes" else "no"}"
      
      SCAN_SYSTEM="${if cfg.scanTargets.system then "yes" else "no"}"
      SCAN_CONTAINERS="${if cfg.scanTargets.containers then "yes" else "no"}"
      SCAN_FILESYSTEMS="${if cfg.scanTargets.filesystems then "yes" else "no"}"
    '';
    
    # Management scripts
    environment.systemPackages = [
      (pkgs.writeScriptBin "vuln-scan" ''
        #!${pkgs.bash}/bin/bash
        echo "Running on-demand vulnerability scan..."
        sudo systemctl start vulnerability-scanner
        echo "Scan started. Check logs with: journalctl -u vulnerability-scanner"
      '')
      
      (pkgs.writeScriptBin "vuln-report" ''
        #!${pkgs.bash}/bin/bash
        SCAN_DIR="/var/lib/hypervisor/vulnerability-scans"
        
        if [ ! -d "$SCAN_DIR" ]; then
          echo "No scans found"
          exit 1
        fi
        
        LATEST=$(ls -t "$SCAN_DIR"/scan-*.json 2>/dev/null | head -1)
        
        if [ -z "$LATEST" ]; then
          echo "No scan reports found"
          exit 1
        fi
        
        echo "Latest Vulnerability Scan Report"
        echo "================================"
        cat "$LATEST" | ${pkgs.jq}/bin/jq .
        echo ""
        echo "Detailed reports in: $SCAN_DIR"
        ls -lh "$SCAN_DIR"
      '')
      
      (pkgs.writeScriptBin "vuln-update-db" ''
        #!${pkgs.bash}/bin/bash
        echo "Updating vulnerability databases..."
        sudo systemctl start vulnerability-db-update
        echo "Update started. Check logs with: journalctl -u vulnerability-db-update"
      '')
    ];
  };
}
