# Hyper-NixOS Feature Management System Module
# Provides the feature management wizard and tools

{ config, lib, pkgs, ... }:

let
  inherit (lib) mkOption mkEnableOption mkIf mkDefault mkForce mkMerge types;
  cfg = config.hypervisor.featureManagement;
  
  # Feature manager wizard script
  featureManagerScript = pkgs.writeScriptBin "feature-manager" ''
    #!${pkgs.bash}/bin/bash
    ${builtins.readFile ../../scripts/feature-manager-wizard.sh}
  '';
  
  # Helper tools
  hvFeatureScript = pkgs.writeScriptBin "hv-feature" ''
    #!${pkgs.bash}/bin/bash
    set -euo pipefail
    
    case "$1" in
      list)
        if [[ "''${2:-}" == "--enabled" ]]; then
          ${pkgs.gnugrep}/bin/grep -oP 'enabledFeatures\s*=\s*\[\s*\K[^\]]+' \
            /etc/nixos/hypervisor-features.nix 2>/dev/null | \
            ${pkgs.coreutils}/bin/tr -d '[]"' | ${pkgs.coreutils}/bin/tr ',' '\n' | \
            ${pkgs.gnused}/bin/sed 's/^ *//g' | ${pkgs.gnugrep}/bin/grep -v '^$' || true
        else
          ${pkgs.jq}/bin/jq -r '.features | keys[]' \
            /etc/hypervisor/features/features-database.json 2>/dev/null || \
            echo "Feature database not found"
        fi
        ;;
        
      info)
        feature="$2"
        ${pkgs.jq}/bin/jq ".features.\"$feature\" // \"Feature not found\"" \
          /etc/hypervisor/features/features-database.json
        ;;
        
      deps)
        feature="$2"
        ${pkgs.jq}/bin/jq -r ".features.\"$feature\".dependencies[]? // empty" \
          /etc/hypervisor/features/features-database.json
        ;;
        
      check-resources)
        total=0
        for feature in $(hv-feature list --enabled); do
          ram=$(${pkgs.jq}/bin/jq -r ".features.\"$feature\".ram // 0" \
            /etc/hypervisor/features/features-database.json)
          total=$((total + ram))
        done
        system_ram=$(${pkgs.procps}/bin/free -m | ${pkgs.gawk}/bin/awk '/^Mem:/ {print $2}')
        echo "Total RAM required: ''${total}MB"
        echo "System RAM: ''${system_ram}MB"
        if [[ $total -gt $system_ram ]]; then
          echo "WARNING: Insufficient RAM!"
        fi
        ;;
        
      resource-report)
        echo "Feature Resource Usage Report"
        echo "============================"
        total=0
        for feature in $(hv-feature list --enabled); do
          ram=$(${pkgs.jq}/bin/jq -r ".features.\"$feature\".ram // 0" \
            /etc/hypervisor/features/features-database.json)
          printf "%-30s %6d MB\n" "$feature:" "$ram"
          total=$((total + ram))
        done
        echo "============================"
        printf "%-30s %6d MB\n" "TOTAL:" "$total"
        ;;
        
      validate)
        echo "Validating current configuration..."
        # Check for conflicts
        enabled=($(hv-feature list --enabled))
        for feature in "''${enabled[@]}"; do
          conflicts=$(${pkgs.jq}/bin/jq -r ".features.\"$feature\".conflicts[]? // empty" \
            /etc/hypervisor/features/features-database.json)
          for conflict in $conflicts; do
            if [[ " ''${enabled[@]} " =~ " $conflict " ]]; then
              echo "ERROR: $feature conflicts with $conflict"
            fi
          done
        done
        
        # Check dependencies
        for feature in "''${enabled[@]}"; do
          deps=$(${pkgs.jq}/bin/jq -r ".features.\"$feature\".dependencies[]? // empty" \
            /etc/hypervisor/features/features-database.json)
          for dep in $deps; do
            if [[ ! " ''${enabled[@]} " =~ " $dep " ]]; then
              echo "WARNING: $feature requires $dep"
            fi
          done
        done
        ;;
        
      *)
        echo "Usage: hv-feature {list|info|deps|check-resources|resource-report|validate} [args]"
        exit 1
        ;;
    esac
  '';
  
  # Quick template application
  applyTemplateScript = pkgs.writeScriptBin "hv-apply-template" ''
    #!${pkgs.bash}/bin/bash
    template="''${1:-standard}"
    
    if [[ -z "$template" ]]; then
      echo "Usage: hv-apply-template <template-name>"
      echo "Available templates: minimal, standard, enhanced, professional, enterprise"
      exit 1
    fi
    
    echo "Applying $template template..."
    
    # Get features for template from tier-templates
    features=$(${pkgs.jq}/bin/jq -r ".\"$template\".features[]? // empty" \
      /etc/hypervisor/tier-templates.json 2>/dev/null)
    
    if [[ -z "$features" ]]; then
      echo "Template '$template' not found!"
      exit 1
    fi
    
    # Generate configuration
    cat > /tmp/hypervisor-features.nix << EOF
    # Generated by hv-apply-template
    { config, lib, pkgs, ... }:
    {
      hypervisor.systemTier = "$template";
      hypervisor.featureManager = {
        enable = true;
        enabledFeatures = [
    $(echo "$features" | while read -r feature; do
        echo "      \"$feature\""
      done)
        ];
      };
    }
    EOF
    
    # Backup and apply
    sudo cp /etc/nixos/hypervisor-features.nix \
      /etc/nixos/backups/hypervisor-features-$(date +%Y%m%d-%H%M%S).nix 2>/dev/null || true
    sudo mv /tmp/hypervisor-features.nix /etc/nixos/hypervisor-features.nix
    
    echo "Configuration updated. Run 'sudo nixos-rebuild switch' to apply."
  '';
  
  # Feature database
  featureDatabase = {
    version = "1.0";
    features = {
      # Core features
      core = {
        category = "core";
        description = "Essential system components and CLI tools";
        ram = 512;
        dependencies = [];
        conflicts = [];
      };
      cli-tools = {
        category = "core";
        description = "Command-line management utilities";
        ram = 64;
        dependencies = ["core"];
        conflicts = [];
      };
      
      # Virtualization features
      libvirt = {
        category = "virtualization";
        description = "VM management with QEMU/KVM";
        ram = 256;
        dependencies = ["core"];
        conflicts = [];
      };
      qemu-kvm = {
        category = "virtualization";
        description = "QEMU/KVM hypervisor";
        ram = 128;
        dependencies = ["libvirt"];
        conflicts = [];
      };
      virt-manager = {
        category = "virtualization";
        description = "Virt-Manager GUI";
        ram = 512;
        dependencies = ["libvirt"];
        conflicts = [];
      };
      
      # Networking features
      "networking-basic" = {
        category = "networking";
        description = "NAT networking and basic bridges";
        ram = 64;
        dependencies = ["core"];
        conflicts = [];
      };
      "networking-advanced" = {
        category = "networking";
        description = "VLANs, OVS, SDN support";
        ram = 256;
        dependencies = ["networking-basic"];
        conflicts = [];
      };
      firewall = {
        category = "networking";
        description = "NFTables-based firewall";
        ram = 128;
        dependencies = ["networking-basic"];
        conflicts = [];
      };
      
      # Storage features
      "storage-basic" = {
        category = "storage";
        description = "Local file-based storage";
        ram = 0;
        dependencies = ["core"];
        conflicts = [];
      };
      "storage-lvm" = {
        category = "storage";
        description = "LVM volume management";
        ram = 128;
        dependencies = ["storage-basic"];
        conflicts = [];
      };
      "storage-zfs" = {
        category = "storage";
        description = "ZFS filesystem support";
        ram = 1024;
        dependencies = ["storage-basic"];
        conflicts = [];
      };
      "storage-distributed" = {
        category = "storage";
        description = "Ceph/GlusterFS support";
        ram = 2048;
        dependencies = ["networking-advanced"];
        conflicts = [];
      };
      
      # Security features
      "security-base" = {
        category = "security";
        description = "Basic hardening and SELinux";
        ram = 512;
        dependencies = ["core"];
        conflicts = [];
      };
      "ssh-hardening" = {
        category = "security";
        description = "SSH security configurations";
        ram = 0;
        dependencies = ["security-base"];
        conflicts = [];
      };
      "audit-logging" = {
        category = "security";
        description = "System audit trail";
        ram = 256;
        dependencies = ["security-base"];
        conflicts = [];
      };
      "ai-security" = {
        category = "security";
        description = "AI/ML threat detection";
        ram = 4096;
        dependencies = ["monitoring" "security-base"];
        conflicts = [];
      };
      
      # Monitoring features
      monitoring = {
        category = "monitoring";
        description = "Prometheus + Grafana stack";
        ram = 1024;
        dependencies = ["core"];
        conflicts = [];
      };
      logging = {
        category = "monitoring";
        description = "Loki centralized logging";
        ram = 512;
        dependencies = ["monitoring"];
        conflicts = [];
      };
      alerting = {
        category = "monitoring";
        description = "AlertManager notifications";
        ram = 256;
        dependencies = ["monitoring"];
        conflicts = [];
      };
      
      # Desktop environments
      "desktop-kde" = {
        category = "desktop";
        description = "KDE Plasma desktop";
        ram = 2048;
        dependencies = ["core"];
        conflicts = ["desktop-gnome" "desktop-xfce"];
      };
      "desktop-gnome" = {
        category = "desktop";
        description = "GNOME desktop";
        ram = 2048;
        dependencies = ["core"];
        conflicts = ["desktop-kde" "desktop-xfce"];
      };
      "desktop-xfce" = {
        category = "desktop";
        description = "XFCE lightweight desktop";
        ram = 1024;
        dependencies = ["core"];
        conflicts = ["desktop-kde" "desktop-gnome"];
      };
      
      # Enterprise features
      clustering = {
        category = "enterprise";
        description = "HA clustering support";
        ram = 8192;
        dependencies = ["monitoring" "networking-advanced"];
        conflicts = [];
      };
      "high-availability" = {
        category = "enterprise";
        description = "Automatic failover";
        ram = 1024;
        dependencies = ["clustering"];
        conflicts = [];
      };
      "multi-tenant" = {
        category = "enterprise";
        description = "Tenant isolation";
        ram = 2048;
        dependencies = ["network-isolation"];
        conflicts = [];
      };
      
      # Additional features
      "web-dashboard" = {
        category = "management";
        description = "Web management interface";
        ram = 512;
        dependencies = ["monitoring"];
        conflicts = [];
      };
      "container-support" = {
        category = "development";
        description = "Podman/Docker runtime";
        ram = 1024;
        dependencies = ["core"];
        conflicts = [];
      };
      automation = {
        category = "automation";
        description = "Ansible integration";
        ram = 256;
        dependencies = ["core"];
        conflicts = [];
      };
    };
  };

in {
  options.hypervisor.featureManagement = {
    enable = mkOption {
      type = types.bool;
      default = true;
      description = "Enable the feature management system";
    };
    
    allowRuntimeChanges = mkOption {
      type = types.bool;
      default = true;
      description = "Allow feature changes at runtime (requires rebuild)";
    };
    
    autoBackup = mkOption {
      type = types.bool;
      default = true;
      description = "Automatically backup configuration before changes";
    };
    
    backupRetention = mkOption {
      type = types.int;
      default = 30;
      description = "Number of days to retain configuration backups";
    };
  };
  
  config = mkIf cfg.enable {
    # Install management tools
    environment.systemPackages =  [
    pkgs.featureManagerScript
    pkgs.hvFeatureScript
    pkgs.applyTemplateScript
    pkgs.jq  # Required for JSON processing
    pkgs.dialog  # For better UI if available
    ];
    
    # Create necessary directories
    system.activationScripts.featureManagement = ''
      mkdir -p /etc/hypervisor/{bin,features,templates,backups}
      mkdir -p /var/lib/hypervisor/{cache,state}
      
      # Install feature database
      cat > /etc/hypervisor/features/features-database.json << 'EOF'
      ${builtins.toJSON featureDatabase}
      EOF
      
      # Set permissions
      chmod 755 /etc/hypervisor/bin
      chmod 644 /etc/hypervisor/features/features-database.json
    '';
    
    # Desktop entry for GUI environments
    services.xserver.desktopManager.extraDesktopEntries = mkIf config.services.xserver.enable {
      hypervisor-features = {
        name = "Hyper-NixOS Feature Manager";
        comment = "Manage system features and configuration";
        icon = "applications-system";
        exec = "konsole -e feature-manager";
        categories = ["System" "Settings"];
      };
    };
    
    # Backup cleanup service
    systemd.services.hypervisor-feature-backup-cleanup = mkIf cfg.autoBackup {
      description = "Clean up old feature configuration backups";
      serviceConfig = {
        Type = "oneshot";
        ExecStart = "${pkgs.findutils}/bin/find /etc/nixos/backups -name 'hypervisor-features-*.nix' -mtime +${toString cfg.backupRetention} -delete";
      };
    };
    
    systemd.timers.hypervisor-feature-backup-cleanup = mkIf cfg.autoBackup {
      description = "Run feature backup cleanup daily";
      wantedBy = [ "timers.target" ];
      timerConfig = {
        OnCalendar = "daily";
        Persistent = true;
      };
    };
    
    # Shell aliases for convenience
    environment.shellAliases = {
      "hv-features" = "feature-manager";
      "hvf" = "hv-feature";
    };
    
    # Documentation
    environment.etc."hypervisor/docs/feature-management.md" = {
      source = ../../docs/FEATURE_MANAGEMENT_GUIDE.md;
      mode = "0644";
    };
    
    environment.etc."hypervisor/docs/feature-catalog.md" = {
      source = ../../docs/FEATURE_CATALOG.md;
      mode = "0644";
    };
  };
}